
上节课练习 :
输入购买商品的价格和购买数量, 计算总金额, 输出到屏幕上
shopping.c
#include <stdio.h>

int main(void){
    int num = 0;
    double price = 0.0;
    double sum = 0.0;
    //获取用户输入
    printf("请输入商品单价(元):")
    scanf("%lf", &price);
    printf("请输入购买数量:");
    scanf("%d", &num);

    //计算总金额
    double sum = price * num;
    printf("花费总金额为:%lf元\n", sum);

    return 0;
}


今日内容:
一.进制转换
十进制 - 人 - 逢十进一 - 0~9
    人常用
二进制 - 计算机 - 逢二进一 - 0~1
    计算机常用
    十进制      二进制
    0             0
    1             1
    2            10
    3           011
    4           100
    5           101
    6           110
    7          0111
    8          1000
    9          1001
    10         1010
    11         1011
    12         1100
    ...

01010101010
计算机 - 笨
    嵌入式 - 高电平 1 低电平 0

二进制数对应的十进制数据是多少呢? 位与权

明确 :
1.数据在内存硬件上以二进制的方式存储
    1个字节 = 8bit
    1Byte = 8bit
    2Byte = 16bit
    4Byte = 32bit
    ...
    1B = 8b

二进制特点 :
二进制数据的每个bit位都有编号, 从右向左, 从0开始依次递增

char类型 : 1字节存储
    高     低
    <-------    从右向左依次递增, 从0开始
    76543210    每个位的编号
    01010101    二进制数据

    第0位, 叫做bit0位,  该数据数据, bit0位上的数据

short类型 : 2字节存储
    第一个字节存储7-0这8位
    第二个字节存储15-8这8位
    高                        低
    <----------------------------
    15 14 13 12 11 10 98 76543210    每个位的编号
    0  1  0  1  0  0  10 10100101    二进制数据

二进制数据中每个1单独表示一个十进制数据, 这个十进制数是2的编号次方
举例 :
    76543210    位编号
    01000000    [6]上的1对应的十进制数字是2的6次方=64

    76543210    位编号
    00010000    [4]上的1对应的十进制数字是2的4次方=16

二进制数中相邻的两个1, 左边是右边的2倍
    76543210    位编号
    01100000
            [6]上的1对应的十进制数字是2的6次方=64
            [5]上的1对应的十进制数字是2的5次方=32

逢二进一
    例如 :
        00001111 + 1 = 00010000
        00001110 + 1 = 00001111
-------

二进制的符号位 :
有符号类型的数字 - 不加unsigned关键字修饰的数字
有符号类型的数字才有符号位, 二进制数"最左边"的位叫做符号位
通过该bit可以确定数字的符号
    符号位为0 - 非负数
    符号位为1 - 负数

char -
    [0]1011010 - 正数
    符号位 - 0 - 正数
char -
    [1]1011010 - 负数
    符号位 - 1 - 负数
unsigned char -
    [1]1011010 - 正数
        unsigned - 只能是0或者正数
short -
    10101010 - 正数
    short - 2个字节 - 16bit - 前面是有8个bit - 没有显示
        [0]0000000 10101010 - 完整写法
        0 - 正数
short -
    [1]0111111 00001111 - 负数
    [0]0111111 00001111 - 正数

char -
    00001111 11110000 - 赋值给一个char类型的变量a
    a 负数
        a - char - 8bit - 拿8bit - 拿低8bit - 作为我们的数据
            11110000 -> a -> [1]1110000
                              符号位 - 负数

unsigned类型的数据 - 没有符号位
unsigned short :
    10000000 00001111
    ^ -> 该1就表示数据本身 -> 2^15

二进制数据和十进制数据的互相转换 :
非负数
    二进制 -> 十进制
        二进制的每个1转换为十进制即可

    76543210 编号
    01010101 二进制数据, unsigned  char 类型
    十进制数据 = 2^6 + 2^4 + 2^2 + 2^0 = 64 + 16 + 4 + 1 = 85

    十进制 -> 二进制
        除2取余, 逆序排列
        
    n  / 2 = s1 - y1
    s1 / 2 = s2 - y2
    s2 / 2 = s3 - y3
    s3 / 2 = s4 - y4
    ...
    sn / 2 = 0  - yn

    111 -> 0110 1111  看做是unsigned char类型

将数据91(unsigned char)转换为二进制
    91 / 2 = 45 余1 0 最低位
    45 / 2 = 22 余1 1
    22 / 2 = 11 余0 2
    11 / 2 = 5  余1 3
    5  / 2 = 2  余1 4
    2  / 2 = 1  余0 5
    1  / 2 = 0  余1 6

    91 -> 0101 1011 (不够8位, 高位补0, 凑够1字节)

负数 :
    负数 char - 1011 0011 - 不可以直接转换 - 借助于相反数

    步骤 : -5的二进制?? - char类型
        -> 背 -> 去负转二 取反加一
    1. 取反 - 相反数
        -5 -> 5
    2. 将取得的正数转换为二进制
        5 -> 0000 0101
    3. 将第二步的数据取反 -> 所有的数据0变1 1变0
        0000 0101 取反:
        1111 1010
    4. 将第三步的数据加1
        1111 1010 + 1 =
        1111 1011
    
    得到了-5的二进制 - 1111 1011

    练习 : 将-36转换为二进制表示形式 - char
    -36 -> 36  -> 0010 0100 -> 1101 1011 -> 1101 1100

二进制 -> 十进制
    减一取反 转十取负
    将负数的二进制到十进制, 逆序即可
    1111 1011 - char
    1. 将二进制数减一
        1111 1011 - 1 :
        1111 1010
    2. 将1. 的数据取反
        1111 1010 取反:
        0000 0101
    3. 将二进制转换为十进制
        0000 0101 -> 5
    4. 将3. 结果取负
        5 -> -5

------------------
    1.  取反
        1111 1011
        0000 0100
    2.  加一
        0000 0100 + 1
        0000 0101
    3.  转十
        0000 0101 -> 5
    4.  添负
        5 -> -5

一个char类型的变量中存储了10010011, 该数据的十进制是多少呢?
        10010011 -1 -> 10010010 -> 取反 -> 01101101 -> 十进制 -> 109 -> -109

区公司 :
    a -> b -> c -> d -> e -> 公司

回家 :
    公司 -> e -> d -> c -> b -> a

10010 - 无法区分 - 二进制 - 十进制




HEX - 十六进制
    前缀 : 0x/0X
DEC - 十进制
    无前缀
OCT - 八进制
    前缀 : 0
        0134
BIN - 二进制
    前缀 : 0b/0B
        0b1101 - 不要这么写 - 不是标准C语言的语法, 只是一些编译器做了扩展
        gcc编译器现在版本 - 支持
        理解为：不能显示的将二进制转换出来，二进制无占位符


二进制和八进制 - 了解(玩八进制主要是玩权限)
权限 - 0644
字面值前缀 - 0 例如 - 0520
printf - 占位符 - %#o
例如 :
    1110 1001 -> 11 101 001 ->
               0 3  5    1 -> 0351

八进制 -> 二进制
    0155 -> 001 101 101 -> 0110 1101

---------------------------------
十进制  |    二进制      |   八进制
---------------------------------
93     |    01 011 101 |   0135
109    |    01 101 101 |   0155
-93    |    10 100 011 |   0243
---------------------------------

二进制和十六进制 - 重点
概念 -
    逢十六进一
    使用0到15组合来表示数字 - 不行
    0 1 2 3 4 5 6 7 8 9 a b c d e f 组合来表示十六进制

    a/A -> 10
    b/B -> 11
    c/C -> 12
    d/D -> 13
    e/E -> 14
    f/F -> 15

int num = 0x14f6;
前缀 :
    0x/0X
占位符 :
    %x/%X     -> 没有0x
    %#x / %#X -> 0x -> 一站式服务（会把0x前缀加上）

二进制 -> 十六进制 :
    1100 0011 -> 十六进制
    12   3
    c    3
    十六进制 : 0xc3

    十六进制    二进制
    0           0000
    1           0001
    2           0010
    3           0011
    4           0100
    5           0101
    6           0110
    7           0111
    8           1000
    9           1001
    a           1010
    b           1011
    c           1100
    d           1101
    e           1110
    f           1111

背下来 - 经常需要使用到十六进制的数据
    嵌入式 - 玩位运算(后面讲) - 位 - 熟练背住


    
---------------------------------
十进制  |    二进制     |   十六进制
---------------------------------
93     |    0101 1101 |   0X5D
109    |    0110 1101 |   0X6D
-93    |    1010 0011 |   0XA3
-109   |    1001 0011 |   0X93
---------------------------------

进制转换 - 脑子直接算的 - 二进制和十六进制

十进制 - 二进制
    口算 - 小的数
87 - 存储最大的2的几次方
    存储最大为2的6次方 - 64
        87 - 64 = 23
23 - 存储最大的2的几次方
    存储最大为2的4次方 - 16
        23 - 16 = 7
7

    7654 3210   位编号
    0101 0111   87

核心 - 二进制

二.运算符
运算符 - 计算机用来计算的 - 类似于数学的计算符号
    + - * / ...
    运算符

大量的运算符

1. 赋值运算符  =
    将右边的值给左边的变量,赋值[从右向左]计算
    一步一步看

    int val;
    val = 100; //将数据100赋值给变量val, 100放到了变量val的内存存储区中

    int a, b, c;
    a = b = c = 100;
    c = 100; //将100赋值给c
    b = c; //将c赋值给b
    a = b; //将b赋值给a
    可以 - 不推荐 - 花里胡哨

- 赋值符号左边必须是变量, 不能是常数或者表达式
    0 = val;  将变量val的值赋值给0 -> 可笑 -> error
    5 + 6 = 0;
- 复合赋值
    i += 3; ==> i = i + 3;

    a -= 4; ==>
        - : 先计算减号 -> a - 4
        = : 再计算赋值 -> a = a - 4;
            再赋值给左边的变量

    5 + 6
    5 (+-) 6

02assign.c

2. 算数运算符
- 加(+) 减(-) 乘(*)
- 除(/)
    整数相除, 保留整数
        5 / 2 = 2
        5 / 3 = 1
        5 / 2.0 = 2.5
    负数相除也是一样的
- 模(%)
    获取余数 - 取余符号 - 模运算符
        10 % 3 = 1
        5 % 2 = 1
    % 获取的余数 - 和%前面数字的正负号相同


    不可以对0做/和% - 中断程序
    数学 - 0不可以作为除数

    /0.0 得到的是无穷大 - inf
    浮点数 - 0.0 - 并不是真正的0.0 - 而是一个无限趋近于0.0的数据 - 0.000000000000000000001
        1. 不报错
        2. 无穷大
    %只能用于整数 - 浮点数不支持

03operation.c
练习时间 :
    输入一个秒数, 输出hh小时mm分ss秒
    scanf("%d", &second);
    3601 -> 1小时0分钟1秒

    1h = 3600s
    1h = 60min
    1min = 60s
time.c

