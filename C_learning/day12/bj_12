练习:
1.输入10个整数, 逆序输出.

今日内容:
一.数组
- 二维数组
    数组中的元素可以是 一个普通数组 - 二维数组
    二维数组 - 本质 - 一维数组

    一个班成绩 - 50
        一维数组 - int a[50]
        二维数组 - 50人 - 分为5组 - 10个人
                - 二维数组 分为5组 每组10个元素
        本质 - 处理这50个数据

    int a[3][4] = {{1,2,3,4}, {5,6,7,8}, {9,10,11,12}};
        将二维数组分为三组,
        每组有4个int类型.


    a - 二维数组名
    3 - 数组中有3个元素, 每个元素都是一个数组
    4 - 每个元素都是一个4个int类型的数组

    int a[3][4] = {1,2,3,4,
                   5,6,7,8,
                   9,10,11,12};

            6 - 二维数组的 - 第二组第二个元素

像素点 : 1920 * 1080
    每一行 - 1920像素点
    一共有1080行
    1920*1080 像素点 - 数据来描述的 - 4/3/

    一维 - 可以 - 麻烦


    使用二维数组 - 矩阵化的感觉 -

    
    int a[][4] = {{1,2,0,0}, {5,6,7,8}, {9,10,0,0}};
        每组有4个元素 - 一共有3组

    
    int a[10] = {1};


-
    mat[i] - mat中第i个一维数组的名字 - 数组名
    数组名 - 就是数组首地址
        mat[0] - 第0个一维数组的首地址

    mat[0] - 看做是第0个一维数组的名字
        mat[0]  [i]
          |      |
        数组名   下标
        mat[0][0] - mat[0]数组的第0个元素
        mat[0][1] - mat[0]数组的第1个元素



访问数组元素 :
    数组名[下标]

int a[];

二.函数
为什么 - 学习函数

怎么写函数 - 如何调用

程序的执行路径 - C程序 - 都是从main函数开始执行
main函数执行完 - 程序就结束

怎么写函数 - 三步骤
    定义
    调用
    声明

03func.c
    return - 表示当前函数的结束
           - 表示返回数据 - 返回值
    
    break - 离开循环

int var(int x, int y){...}

main函数调用var函数:
    返回值 - var函数会给调用函数(main函数)一个int类型的值 - 返回值
            main函数 - 需要定义变量 - 存储var函数的返回值
            返回值的数据 和 返回值的类型 - 保持一致
    形参   - 调用函数(main)给被调用函数(var)函数一个数据,该数据叫实参
            var函数(被调用)需要提供存储区来存储main函数传递的实参,
            也需要定义变量存储数据, 称之为形参
            实参 -> 形参  值传递  - 将实参的值给形参


没有参数
    没有返回值
    有返回值
有参数
    没有返回值
    有返回值

- 函数定义 - 放在main函数的后边
    关于函数的定义 - 放到了main函数后面 - gcc编译器找不到函数的定义了

    声明 - 告诉编译器 - 后续有一个这样的函数

    extern int bar(void); -
        编译器你好, 我有一个返回值为int, 没有形参,函数名为bar的函数 -
            一会你调用的时候, 如果没有找到这个函数, 先别报错, 可能在后面, 或者在其他文件中
