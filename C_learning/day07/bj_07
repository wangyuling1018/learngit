
练习:
    输入一个秒数, 输出hh小时mm分ss秒
    scanf("%d", &second);
    3601 -> 1小时0分钟1秒

    1h = 3600s
    1h = 60min
    1min = 60s

time.c
#include <stdio.h>

int main(void){
    printf("请输入一个秒数:");
    int second;
    scanf("%d", &second);
    //3661
    //3661/3600 = 1
    //3661%3600 -> 除了小时之外的秒数 -> 61
    //  61/60  = 1
    //3661%60 = 不构成一分钟的 -> 只有秒数 -> 1
    //1h1m1s
    printf("%dh%dm%ds\n", second/3600, second%3600/60, second%60);
    return 0;
}
今日内容 :
一. 运算符
1.赋值运算
    =
    区分 : == 判断是否等于
2.算数运算
    + - * / %
3. 算数运算符之自增减运算
    ++ 自增
    -- 自减
    ++/-- 变量自增/自减1, 不能用于常数
    ++ -> 将变量对应内存中的数据加1
    -- -> 将变量对应内存中的数据减1

    int a = 100;
    a++ -> 变量a自增, 将变量a对应内存的值100加上1, 再存储到内存中
        ->
    __ __ __ __     ->变量a的4个字节 -> 存储100 -> a++ -> 变为了101
    a

    不能用于常数 -> 5++ 7-- -> error

    前缀表达式 : 先自增减, 后运算
        ++a / --a
        先把变量的值完成了自增/自减, 然后再去运算
    后缀表达式 : 先运算, 后自增减
        a++ / a--
        先拿变量的值去运算, 然后再讲变量的值自增/自减
    
01ins_des.c

左值 :
    放在赋值符号左边的值, 叫做左值
    a = 5; a是左值
    5 = a; //报错的, 5不能放在左边 -> 5不是左值
    目前 - 变量时左值

右值 :
    只能放在赋值符号右边的值, 叫做右值
    5是右值  5++

- 变量i i++ ++i, 从内存上讲, 同一块内存区域
- i++ / ++i 最好单独作为一个语句出现

    int a = 10;
    a++ + ++a


int a = 10;
    a++ -> 先使用10, 后自增 -> a表示的是10, 等表达式结束后, 变为了11
    ++a -> 先自增, a的值现在是10, 自增后为11 -> a的值为11
    表达式结束后 -> a++ -> 加上1 -> 12

    ++a和a++操作的是同一块区域

循环(后面重点讲) - 自增和自减

4. 关系运算
只是表示两个数据之间的大小关系
    判断两个数据是否等于 ==
                不等于 !=
                大于   >
                小于    <
                大于等于 >=
                小于等于 <=
    表达式的结果 :
        真 - 成立 5 > 4
            使用1来表示
        假 - 不成立 5 < 4
            使用0来表示
- 不要进行连续的关系运算
    5 < 4 < 3 -> (5 < 4) < 3
    如何来解决呢?

数学的角度分析 - 5 < 4 < 3 是否成立  - 不成立
    计算机的角度上成立 - 为啥呢?
02rel.c



a=11
b=2
a++ + b++ + ++a
11 + 2 = 13  a = 12
++a = 13 13 + 13 = 26
13

11 + 2 + 13 = 26

5. 逻辑运算
    && - 逻辑与
    || - 逻辑或
    !  - 逻辑非

计算机中的真就是非0(包括1) 假是0来表示
与 :
    A && B
    并且, 全真则真, 否则为假
        A或者B有一个为假, 结果为假
或 :
    A || B
    或者, 全假为假, 否则为真
        A或者B有一个为真, 结果为真
非 :
    !A
    反之, 非真为假, 非假为真

5 < 4 < 3
拆分 :
    5 < 4 && 4 < 3 成立, 5<4<3 成立; 否则不成立



逻辑表达式的值为真或者假, 分别使用1和0来表示
03logic.c


括号 - 把想要先算的内容, 无脑加圆括号

逻辑运算  - 短路运算
编程的是谨慎谨慎再谨慎 - 大量代码 - &&/|| - 忘记
问题 :
假设不知道B是多少
    C = 100 || B;
        C的结果是否可以确定
        C的结果为真 ==1, 100为真, C都为真
    D = 0 && B;
        D的结果是否可以确定
        D的结果为假 ==0, 0为假, D都为假

疑问 : B没有用处
    B为真或者为假, 都不会影响计算结果 - 将B短路掉 - 不再计算B的值

短路与 :
    若第一个表达式为假, 则结果为假, 后面的表达式不再计算
    C = A && B;
短路或 :
    若第一个表达式为真, 则结果为真, 后面的表达式不再计算
    C = A || B;

    0 + 5 = 5；其中的0代表的是一个计算的数字，0不参+-*/的情况下，一般0表示假

6.条件运算, 逗号运算, 取地址和解引用运算
- 条件运算
    唯一的三目运算符 - 需要三个数据
        + - / * - 双目运算 - 两个数据
        ! - 单目运算符
语法格式 :
    条件表达式 ? 表达式1 : 表达式2;
若条件表达式为真, 整个表达式的值取表达式1的值, 否则取表达式2的值

D = 条件表达式A ? 表达式1 : 表达式2;
    如果A为真, D = 表达式1
    如果A为假, D = 表达式2

int a = (1 > 2) ? 2 : 3; // a = 3
int a = (2 > 1) ? 2 : 3; // a = 2

abs.c -> 求一个数据的绝对值

- 逗号运算
语法格式 :
    表达式1, 表达式2, ..., 表达式n
    依次计算各个表达式的值, 以表达式n的值作为整个表达式的值.

- 并不是所有出现逗号的地方都是逗号表达式
    int a = 2, b = 4, c = 6; //不是逗号表达式

abs.c

- 取地址和解引用运算
C - 指针 - 地址
%p - 地址的占位符
取地址符号 - &
    根据变量得到变量的内存地址
    int a = 520; -> 变量a分配了4个字节, 首地址
    printf("%p\n", &a); //获取变量a的首地址
解引用符号 - *
    根据变量的内存首地址获取变量的值
    int a = 520;
    printf("%p\n", &a);
    printf("%d\n", *&a);//&a:a的地址, *&a根据a的地址获取a的值, 520
    *&a = 521; //将变量a的值修改为521

目前 - 到这个程度 - 详细 - 指针

课下练习 :
1. int a = 10, b = 9, c;
c = (--a == b++) ? --a : b++;
    a = ?
    b = ?
    c = ?
2. int a = 10;
    printf("%d\n", a++ + ++a + ++a);
    printf("a = %d\n", a);


二. 类型转换 - 估计后天晚上




