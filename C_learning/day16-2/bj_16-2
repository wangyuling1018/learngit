
今日内容:
自己实现字符串比较函数
从第一个字符开始比较, 直到字符不相等或者到字符串的末尾
01strcmp.c
    s1 == 0, !s1 == 真 - 执行
    s1 != 0, !s1 == 假 - 不执行

char s[3] = {'a', 'b', 'c'}; //不要这么做，没有’\0‘

一.字符串数组
字符串
数组中的每个元素是字符串
1.二维数组
    char sa[4][10] = {0};
        sa[0]    __ __ __ __ __ __ __ __ __ __
                 00 01 02 03 04 05 06 07 08 09    地址
        sa[1]    __ __ __ __ __ __ __ __ __ __
                 10 11 12 13 14 ..          19    地址
        sa[2]    __ __ __ __ __ __ __ __ __ __
                 20 21 22 23 ...            29    地址
        sa[3]    __ __ __ __ __ __ __ __ __ __
                 30 31 32 33 ...            39    地址
        四个一维数组 - 名字 - 数组的首地址
        sa[0] sa[1] sa[2] sa[3] - 都可以存储字符串 - 4个一维数组 - 可以存储4个字符串
        问题1 - 这四个一维数组的首地址可以更改吗?
                不可以改 - 数组名 - 不能改
        问题2 - 这四个一维数组中的字符串的内容可以更改吗?
                数组内容 - 可以修改
        问题3 - 此时一个一维数组中最多可以存储[一维数组长度减1个]有效字符
            定义数组切记
            如果存不下怎么办 - 代码问题
            设计代码 - 存储地址拼音 - zhumulangmafeng
    char sa[4][10] = {"beijing", "tianjin", "shanghai", "chongqing"};

        sa[0]    __ __ __ __ __ __ __ __ __ __
                 00 01 02 03 04 05 06 07 08 09    地址
                 b  e  i  j  i  n  g  \0 0  0
        sa[1]    __ __ __ __ __ __ __ __ __ __
                 10 11 12 13 14 ..          19    地址
                 t  i  a  n  j  i  n  \0 0  0
        sa[2]    __ __ __ __ __ __ __ __ __ __
                 20 21 22 23 ...            29    地址
                 s  h  a  n  g  h  a  i  \0 0
        sa[3]    __ __ __ __ __ __ __ __ __ __
                 30 31 32 33 ...            39    地址
                 c  h  o  n  g  q  i  n  g  \0
02string.c
2.指针数组
    数组中的每个元素是指针
单纯指针数组:
    int a, b, c;
    int* pa = &a;
    int* pb = &b;
    int* pc = &c;
    int* parr[3] = {pa, pb, pc};
单纯指针数组:
    char a, b, c;
    char* pa = &a;
    char* pb = &b;
    char* pc = &c;
    char* parr[3] = {pa, pb, pc};
字符指针数组: - 表示字符串数组
    char* sa[4] = {"beijing", "tianjin", "shanghai", "chongqing"};
    问题1 : sa数组中的每个元素是[什么类型]的数据?
        存储的是char* - 地址
    看到的是字符串 - 本质 : 字符串的首地址
    char* p1 = "beijing";//此时指针变量p1指向了字符串字面值, 指向了一个常量
    char* p2 = "tianjin";
    char* p3 = "shanghai";
    char* p4 = "chongqing";
    char* sa[4] = {p1, p2, p3, p4};

    等价于

    char* sa[4] = {"beijing", "tianjin", "shanghai", "chongqing"};

    分布 :
        sa[0] __
              0x100 地址
              存储 : 0x200 - sa[0]存储字符串beijing的首地址
                        字符串: beijing\0 - 首地址:0x200
        sa[1] __
              0x104 地址
              存储 : 0x300 - sa[1]存储字符串tianjin的首地址
                        字符串: tianjin\0 - 首地址:0x300
        sa[2] __
              0x108 地址
              存储 : 0x400 - sa[2]存储字符串shanghai的首地址
                        字符串: shanghai\0 - 首地址:0x400
        sa[3] __
              0x10c 地址
              存储 : 0x500 - sa[3]存储字符串chognqing的首地址
                        字符串: chongqing\0 - 首地址:0x500
        数组的元素 -
    问题2 : sa[0] sa[1] sa[2] sa[3] 内容可以更改吗?
        可以更改 - 数组的元素都是char*类型的变量 - 可以更改
        char c = 'a';
        sa[0] = &c; //可以
    问题3 : sa[0/1/2/3]所指向的字符串可以更改吗?
        指向的字符串不可以更改


char* sa[0] = "beijing"; //字符串字面值

char* c = 'a';
sa[0] = &c;
问题 : sa[0]是常量指针吗? 不是


3.main函数完整版
    int main (int argc, char* argv[], char* envp[]){}
    int main (int argc, char* argv[]){}
    int argc, char* argv[] - main函数的参数 - 命令行参数
    命令名 - 在输入命令的那一行输入的参数 - 命令行参数
    main函数所接收的参数都是字符串

    char* p1 = "100";
    char* p2 = "200";


明确 : 在终端输入的任何内容操作系统都会将其看做为字符串
    ls - "ls"
    cd - "cd"
    cd  / - "cd" "/"

课下练习 :
    strcpy, strlen, strcat 三选一自定义函数功能

迷你备忘录代码 :
    下课发送给大家

5 睡觉
9 玩
15 踢球
22 看孩子
...

------------
排序


二.预处理指令
