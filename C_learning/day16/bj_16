今日内容:
一.字符串
1.概念
羊肉串
字符串 - 一大堆的字符串起来
    什么是字符 - 单引号括起来的
    一个字符挨着一个字符连成一串, 构成了字符串

    "hello"

    见到\0字符 - 认为 - 字符串结束了

    '\0' - 对应的数字 - 0
        实际上就是使用了数字0来存储的
    注意 - 和'0'区分开
        '0'  = 48
        '\0' = 0
    书写可以省略 \0 字符
    和数组很像 - 有时 - 使用数组来表示

2.字符串表示
字符指针 -
    char* pstr = “hello”;
        pstr存储的是什么呢 - 永远是地址 - 永远是地址 - 永远是地址

    内存字节: __ __ __ __ __ __ __ __ __
    字符串 :  h  e  l  l  o  \0 w  o  r ...
    地址:    10 11 12 13 14 15 16


    char* pstr = "hello";
        定义字符指针变量pstr, 将hello字符串的首地址给pstr
        定义了字符指针pstr存储了hello字符串的第一个字符的地址/字符串的首地址, 存储的是10
        pstr - 定义的指针变量
    使用字符指针指向的字符串 - 字符串的内存空间 - 编译器找的地方 - 无法更改 -
        字符串永远是hello字符串
        无法更改其中的某个字符

        可以更改pstr的值, 但是其指向的字符串无法更改
        pstr == 10
        pstr == 1000 ok

    记住 :
        所谓的%s就是从当前地址开始一个字符一个字符的输出, 直到遇到\0字符为止

    可以查看字符指针指向的字符串内容

字符数组 -
    将字符串"abc"存储起来
    char str[] = {'a', 'b', 'c', '\0'};//存储字符串
        __ __ __ __ __
        a  b  c  \0
        这块存储区 - 数组 - 自己分配的内存 - 随便怎么修改都可以
        
    char str[] = "abc";
        __ __ __ __ __
        a  b  c  \0
        这块存储区 - 数组 - 自己分配的内存 - 随便怎么修改都可以
        编译器会自动将\0字符放入到字符数组中

    
    char* pstr = "hello";
    pstr存储的是地址

3.字符串输入和输出
    gets / puts
4.字符串操作函数
    一系列操作
    标准C库 - 定义好了一堆函数 - 操作字符串
    #include <string.h>
    字符串 - 除了\0字符之外的 - 有效字符
    strlen - 有效字符的个数

    strcat -
        第一个参数 - 必须是一个字符数组的名字 - 字符串的首地址
            char* str = "abc";
            strcat(str, "xyz");//不能行
    strncat - string n cat
        将第二个字符串的前n个字符拼接到第一个字符串后面

    strcpy -
        char str[20] = "abcd";
        strcpy(str, "123456");
        __ __ __ __ __ __ __ __ ... 字符数组
        a  b  c  d  \0
        1  2  3  4  5  6  \0
        就会将原有的字符串abcd, 覆盖掉

        char* p3 = "abcd";
        strcpy(str, p3);
        __ __ __ __ __ __ __ __ ... 字符数组
        1  2  3  4  5  6  \0
        a  b  c  d  \0 6  \0
        只会将前5个覆盖 - 后边的内容没有发生变化

        输出的话, 只会输出abcd\0字符 - 6\0 不会去考虑

        拷贝过去后 - 将原有的覆盖

    strncpy  - string n copy - 拷贝前n个字符
        strncpy(str2, "123456789", 2);//将字符串123456789的前2个字符拷贝到str2数组中
                                        //前两个字符 - '1' '2'
        printf("%s\n", str2);
        __ __ __ __ __ __ __ __ ... 字符数组
        a  b  c  d  \0 6  \0        原本str2字符数组中内容
        1  2  c  d  \0 6  \0        只是将前两个覆盖了, 后面没有发生变化
                                    输出 - 12cd - \0 - 结束了
        输出 - 12cd
    
    strcmp -
        int strcmp (const char* s1, const char* s2);
            s1 == s2 return 0
            s1 < s2  return <0
            s1 > s2  return >0
        通过返回值来表示两个字符串的大小

练习 :
    编写函数实现字符串反转
    输入 : 12345678
    输出 : 87654321

pstr = 字符数组名字
    void reverse(char* pstr){

    }

大家 - 不要只是想 -
    带入一个长度为奇数的字符串算一算 - hello

    如果字符串长度为奇数 - 也可以实现呢?
    建议 - 带入一个字符串算一算 - hello

课下练习 :
    自己实现字符串比较函数
    my_strcmp


//字符指针和字符数组的区别：字符指针所指向的内容不能修改，字符数组的内容可以修改。

char str[10] = "hljslf";
char* pstr = str;
    此时通过pstr修改 - 操作的是str数组中的内容 - 可以修改

char* pstr = "hello";
    无法修改




