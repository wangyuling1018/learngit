虚拟机关机 - 等于 - Windows - 强制关机
虚拟机挂起 - 等于 - Windows - 关机

以后 - 多文件编程
vim -p 文件1 文件2 文件3 ... 文件n
一般模式-  使用gt来进行切换
保存取出 : wqall

假设有一个文件, 已经使用vim将该文件打开了 - 再次打开 - 出现交换文件 - 删掉

交换文件 - 以.开头的隐藏文件 - 删除掉完事(.swap)

今日内容
一.第一个C程序
编程语言 =
人和人 - 语言 - 中文 / 英语 / 意大利语 / ...
人和计算机 - 编程语言 -
    人需要通过语言来控制计算机, 这种语言 - 编程语言 - programming language

C语言的地位?
最开始 : 二进制 - 机器语言
    1 0 1 0 1 ....
    101001010010010
    打孔 1 - 不打孔 0 - 打孔 表示信息

中间阶段 : 汇编语言
    叫做助记符语言
        mov r0, #100 将数据100存储到r0寄存器中 4字节数据

现阶段 :
    高级语言
    起始 - 鼻祖 - C语言 -
        int a = 100; 将数据存储100存储起来
    面向于过程语言 - C++/java/... - 面向于对象的语言
    C语言 - 广泛应用于底层软件开发 - 嵌入式- 玩C语言
        贴近于内存
    

实验步骤：
  mkdir -p /home/tarena/stdc/day03
  cd /home/tarena/stdc/day03
  vim hello.c 添加如下内容
  /*
    创建时间：2022-7-9,19:53:00
    目的：C语言演示
   */
   //这是我的第一个C语言程序
   #include <stdio.h>
   int main(void) {
    printf("hello,world\n");
    return 0;
   }
   保存退出，回到终端中, 继续执行以下命令
   gcc hello.c
   ls -l
    a.out(新生成的可执行文件(x权限))
   ./a.out 运行当前目录下的a.out第一个C语言程序，观察屏幕上的打印信息

C程序 :
    C程序 - 必须有一个源文件
    .c - 写代码
    .py
    .cpp
    .java
    .html
注释 :
    1.让自己看明白
    2.让别人看明白
    /* xxx */
    缺点 - 无法嵌套
    //
    缺点 - 只能在一行
    优点 - 可以嵌套
#include <stdio.h>

stdio.h  - 头文件
    要包含stdio.h这个头文件
    基本只要是C程序都需要包含该头文件
    面试 - 问 : 只要是C语言程序都要包含stdio.h对吗 - 不对

    #include <stdio.h>
    gcc编译器 遇到该代码后到Linux系统路径/usr/include(系统头文件目录)找stdio.h文件
        找到后会将头文件的内容都拷贝到当前.c文件中
        stdio.h - 由系统提供的 - 常用于 <> 方式

    #include "stdio.h"
    gcc编译器 遇到该代码后
    先在当前路径下找stdio.h
        找到 - 将当前目录stdio.h拷贝到当前.c文件中
        没找到 - 再去系统路径(/usr/include)目录去找stdio.h
            找到 - 将头文件的内容都拷贝到当前.c文件中
            没找到 - 报错 - 检查哪儿有问题
        
        hello.h - 自己编辑的头文件 - 常用于""方式
            以后自己写头文件 - 一般没有放到系统路径下 - 使用""

        问题 :
            是否可以都使用"", 可以吗
            可以的

C语言必须包含一个main函数 - 裸板驱动除外
    int main(void){...执行语句}
        integer - 整数
        void - 没有, 不需要参数


    完整版本 :
    int main(int argc, char* argv[], char* envp[]){...}

    从main函数开始自上而下执行的
    return - 返回

    return 0; - 程序结束(return), 返回0给操作系统
        操作系统看到0之后的话, 就会认为 - 程序正常结束
        0 - 整数 - 和int对应
        返回的数据 - 返回值

下面统统不要这么写
    void main(void){...}
    main(void){...}
    int main(){...}
    main(){...}

printf("hello, world\n"); - 标准C库提供的一个函数
如果想要使用该函数 - 需要包含stdio.h

\n - 换行到下一行行首

目的 :
1. 现在 - 看到一点现象
2. 实际 - 调试程序

二.gcc编译器
hello.c  - 给谁看的呢
    计算机 - 只能看懂二进制代码
        010101001010101001001 - 计算机可以看明白
    人 - 给人看的
结果 -
    人可以看明白
    计算机蒙圈

将当前所写的代码经过翻译得到计算机可以看懂的代码, 这个翻译的过程 专业术语 编译
    编译的过程中使用的工具叫做编译器
        gcc就是编译器
    注意 :
        编译器不唯一
            vc
            turbo c
            keil5
过程 :
    gcc hello.c
    得到的a.out

    application - 应用
    out  - 输出
    a.out - 编译程序所得到的输出的应用程序 - 可执行程序 - 二进制程序 - 计算机可以看明白

    缺点 :
        不知道它是干嘛的

    gcc xx.c -> a.out
        目的性很不明确  - 尽量避免这种情况

    gcc hello.c -> a.out
    gcc world.c -> a.out  后面的a.out会将前面的a.out覆盖


高级语言 - 汇编语言 - 机器语言

明确 - 介绍gcc编译程序得到可执行程序的过程
gcc编译程序的详细步骤 :
四步骤 / 三步骤
1 - 预处理
    将源文件中包含的头文件拷贝到当前的.c文件中
    #include <stdio.h> gcc编译器第一步就会讲stdio.h头文件拷贝过来
    gcc -E hello.c -o hello.i
        只进行预处理的步骤, 得到的.i文件, 打开看看

    

2 - 编译
    将预处理得到的.i文件进行编译得到了汇编文件
        汇编文件 : .s / .S
    gcc -S hello.i -o hello.s
        .s - 计算机还是不明白

3 - 汇编
    将编译后得到的.s文件经过翻译得到计算机可以识别的机器指令文件,
        改文件称之为目标文件
        目标文件 : .o后缀
        object
    gcc -c hello.s -o hello.o
        .o - 二进制内容 - 计算机可以看明白

4 - 链接
    将大神的各种代码, 例如printf的实现代码和自己的代码整合起来 - 形成一个二进制可执行程序
    该过程 - 链接
    gcc hello.o -o hello

运行程序 :
    ./hello
    . - 当前目录
    hello - 可执行程序
    运行当前目录下的hello程序



    gcc选项, 描述的是gcc编译器的不同功能
    -E : 让cc编译器只进行预处理步骤
    -o : 指定输出的文件名
    -S : 只进行编译步骤
    -c : 只进行汇编步骤
    

gcc hello.c -> a.out
gcc hello.c -o hello -> 指定生成文件的名字为hello - 最常用

练习 :
编写程序today.c,
使用四步编译的方法来得到可执行程序, 名字为today
运行程序
结果:
输出 today is Saturday, learning makes me happy!

明天上午九点-十二点
下午两点到五点
上课


三.变量
回顾内存RAM功能和特点

字节
地址
存储区 :
    计算机中使用1个字节/连续的多字节 形成一个 存储单元 用来存储数字
    缓冲区
首地址 :
    
