明天 - 3节课
今日内容:
一.函数
    定义 -
    调用 -
        main函数调用其他函数, 其他函数无法调用main函数
    声明 -

数据结构和算法 -
    二叉树 - 递归和递推函数
二.变量的作用域和生命周期
    int val = 0;
根据变量所在的位置 - 局部变量 全局变量
    局部变量 - 定义在函数内部的变量
    全局变量 - 定义在函数外的变量

函数外面 - 全局变量
函数里面 - 局部变量

作用域 - 作用 域 - 可以起到作用的区域 -
    变量的作用域 - 变量在哪些区域中是可以使用的
生命周期 - 生命 周期 - 何时开始,何时结束
    变量的生命周期 - 变量的存在的周期
                - 变量存在 - 定义变量 - 变量存在
                - 变量不存在 - 变量对应的内存被释放

局部变量  -
   从 定义 到 第一个花括号 结束- 生命周期
                使用范围

全局变量  -
    函数外面定义的变量

在定义变量的前面添加static关键字 - 静态的
    静态全局变量
    静态局部变量
        在整个生命周期只会初始化一次, 哪怕看起来执行很多次

静态变量和静态函数使用 - 数据结构和算法 - 详细
    本地化的功能 - 在当前文件调用,但是在其他文件不能使用 - static


01var.c

static - 本地化
    全局变量 -
        可以在当前文件访问
        可以跨文件访问
        a.c -> b.c
    静态全局变量
03var.c  - 负责定义全局变量, 静态全局变量
04var.c  - 调用
编译 :
    gcc 03var.c 04var.c -o var
    ./var

C语言程序中 - 都是从main函数开始执行

    04var.c         03var.c
    main函数    <--   全局变量 - ok
    main        <--   静态全局变量 - error
    main        <--   全局函数 - ok
    main        <--   全局函数 <-- 当前文件的静态全局变量 - ok
    main        <--   静态全局函数 - error
    main        <--   全局函数 <-- 当前文件的静态全局函数 - ok

static - 本地化
    排序功能 - 将排序函数定义为静态函数 - 其他文件无法调用 - 只有本文件可以调用
    
    
                内存生命周期            使用范围
局部变量            函数/块              函数/块
静态局部变量         程序                函数/块
全局变量            程序                所有文件（外部变量）
静态全局变量         程序                定义文件
全局函数            程序                所有文件
静态全局函数         程序                定义文件
    

ctrl + alt + t - 新建终端
alt + tab - 切换终端

vim xx.c
:vs yy.c
ctrl + ww - 两个文件切换

练习 :
    银行系统
    bank.c

三.指针
    指针 -
        指向什么的一个针

        指南针 - 指向南边的一个磁针

    小明 - 北京市海淀区天通苑2区5号楼3单元201
        - 地址
        - 直到小明家的地址 - 通过[地址]找到[小明]

    可以通过内存的地址找到内存中的数据, 这个过程称为指针

    地址 - 名词
    指针 - 动词
    地址就是指针, 指针就是地址

地址 指针 指针变量

指针变量 - 如果一个变量存储了地址/指针, 称该变量为指针变量
int a = 1000;
四字节 :
    __ __ __ __
    10 11 12 13 地址
变量a的首地址为10, 如果定义变量, 该变量存储的是变量a的首地址10, 此时该变量称为指针变量
