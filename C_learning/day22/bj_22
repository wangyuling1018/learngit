今日内容:
一.动态内存分配
C语言分配内存的第四种方法

    变量 - 数组 - 结构体

    一次性分配大量内存 - 数据类型不一致
    struct stu{
        char a;
        int b;
        char c;
        short d;
        float f;
        ...
    }

缺点 :
    只能在堆区

1.动态内存分配
    malloc - memory alloc - 内存分配
    void* malloc(size_t size);
    
    返回值 - void* - 泛型指针 - 可以转换任意类型 - 分配的这块内存 - 可以存储任意类型数据

生命周期 - 这块内存空间何时消亡
    1.调用free函数后 - 该内存会被释放
    2.程序结束
问题 : 如果忘记使用free函数释放该空间, 且程序一致运行 - 后果 - 这块内存一直被占用
    其他程序 - 完全无法使用

2.动态内存释放
    void free(void* ptr);
    释放ptr指向的内存空间 - 就是malloc函数的返回值

    ptr - 地址 - malloc的函数的返回值
        - void* - 泛型指针 - 接收任意类型的地址

    将ptr设置为NULL - 否则出现野指针

    double free - 不用将同一块内存释放两次 - 重复释放


malloc.c

3.calloc函数 - clear allocation - 动态内存分配并做初始化
void* calloc (size_t nmemb, size_t size);
初始化为全0
calloc.c

4. realloc函数 - reset allocation - 动态内存调整
void* realloc (void* ptr, size_t size);
    -将ptr所指向的动态内存大小调整为size字节，原内容保持不变，对新增部分不做初始化
    -成功返回调整后内存块的起始地址，失败返回NULL
    -ptr必须是之前malloc/calloc/realloc函数的返回值

ptr必须是之前malloc/calloc/realloc函数的返回值
    也就是之前动态内存分配的首地址
    需要在这个首地址上调整内存大小
size 将ptr指向的内存大小调整为size个字节大小
realloc.c
调用成功 :
1.如果ptr指向空间之后具有足够的空间可以追加, 则直接追加, 返回p原来的起始地址.
2.如果ptr指向空间之后没有足够的空间可以追加, 此时realloc函数会在堆区重新找一个新的内存区域,
    去开辟空间存储调整后的字节.
调用失败 :
返回NULL

动态调整 - 内存变大, 内存变小.
int* p = (int *)malloc(8);
p = realloc(p, 4);
注意 - 如果将内存变小的时候, 一定会有数据的丢失 - 数据丢失自己是否可以承受

realloc(NULL, 8); == malloc(8);
realloc(p, 0); == free(p)  //将原有分配的8字节，调整为0个字节，就是释放掉了

释放内存 - 何为释放内存 - 当前任务没有权限在访问这块区域, 可以分配给其他任务来访问
        - 释放后数据本身没有发生改变

不能绝对的追求高效率
    让用户输入qq号,
    需要分配15个字节内存, 用户输入qq号
    qq号是7位 - 7个字符 - 15个字节内存存储 - 是一种浪费吗？不是浪费

malloc 灵活 - 用的时候分配, 不用的时候不分配

二.文件操作
之前 - 操作内存中的数据  - 掉电丢失
这节课 - 实现操作闪存/磁盘中的数据
文件操作就是一系列函数

借助于标准C库函数

1.fopen - 打开文件
    如果想要访问文件 - 读 / 写
    前提
    打开文件
    file open
FILE* fopen (
    const char* path, // 文件路径
    const char* mode  // 打开模式);

path - 打开的是哪个文件
    ./bj.txt
    /home/tarena/hello.c
mode -
    r - read - 只读，文件必须存在，从头开始读
    w - write - 只写，文件不存在就创建，存在就清空，从头开始写
        必定向新文件写入内容
    a - append - 追加，文件不存在就创建，存在不清空，从尾开始写
        不存在 - 从头开始写
        存在 - 从尾部开始写

    r+ - r + w - 读写，文件必须存在，从头开始读写
    w+ - w + r - 写读，文件不存在就创建，存在就清空，从头开始写读
        向新文件读写内容
    a+ - 追读，文件不存在就创建，存在不清空，从头开始读，从尾开始写
    以上mode，都是操作文本文件

    操作二进制文件
    rb wb ab rb+ wb+ ab+
    binary - 二进制

    Linux - 文本文件 和 二进制文件 没有区别（读写没有区别）

    Windows  - 文本文件 和 二进制文件 有区别
        文本方式写入 - 将\n -> \r\n写入
        文本方式读取 - 将\r\n -> \n读取
        二进制方式读写文件, 没有任何区别

想要打开一个文件, 是否存在, 存在, 从头开始读取其内容;如果文件不存在, 不读取其内容;不要向其中写入数据
    
2.fclose - 文件关闭

file.c

3.三个默认打开文件指针

标准输入：stdin - 键盘
    standard input file - 设备文件 - 键盘
    scanf("%d", &i);
    ==
    fscanf(stdin, "%d", &i);
标准输出：stdout - 显示器
    standard output file  - 设备文件 - 屏幕
    printf("%d\n", i);
    ==
    fprintf(stdout, "%d\n", i);
标准错误：stderr - 显示器
    standard error output  - 设备文件 - 屏幕
    fprintf(stderr, "%d\n", i);

4.格式化输出和输入
int fprintf (
        FILE*       stream, // I/O流指针
        const char* format, // 格式字符串
        ...                 // 输出数据);
    fprintf(fp,"%d",520); //将520按照%d格式，输出到fp文件中
    成功返回输出字符数，失败返回负数

printf - 类似  - 格式化输出
printf("%d", 100);//将100输出到屏幕上, 将数字100按照%d的格式放过去, 成为了字符串, 输出到屏幕

FILE* fp = fopen("a.txt", "w+");
fprintf(fp, "%d", 100);//将数字100按照%d的格式放过去, 成为了字符串 - 输出到fp对应的文件中


int fscanf (
        FILE*       stream, // I/O流指针
        const char* format, // 格式字符串
        ...                 // 输入数据);
    fscanf(fp,"%d",&a); //将文件fp中的内容按照%d格式，输入到变量a中
    成功返回实际输入的数据项数，失败或遇到文件尾返回EOF
    
双引号 - 字符串

fscanf - 从文件读取数据
fprintf - 向文件中写入数据

5. 非格式化输入输出
fgets - 从文件读取数据
fputs - 向文件中写入数据

6. 二进制格式化输入输出 - 使用频率高
fread - 从文件读取数据
fwrite - 向文件中写入数据

6.文件读写位置
|0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|...
 ^
默认

|0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|...
                 ^
                向文件中写入了8个数据, 如果此时来读取数据 - 从该位置向后进行读取
                此时 - fread - 读取数据 - 什么也读不到
rewind(fp) - 结果，调整读写位置到头部
  ===
fseek(fp, 0, SEEK_SET);

|0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|...
 ^
 此时读取数据 - 没问题

 打开一个文件 - 默认存在 - 游标
 刚打开一个文件 - 默认游标在开头部分
 a / a+

7. fseek
重新调整文件读写位置
fseek(fp, 0, SEEK_END); //调整读写位置到尾部

不能小于0

第二阶段 - 文件


FILE* fp = fopen(...);
if(fp == NULL){
    FILE* fpw = fopen("a.txt", "fpw");
    ....

}else{
    fclose()
}
fclose(fp)

2点继续
