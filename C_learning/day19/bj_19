今日内容:
一.结构体 - struct
    int a =100;//一次性分配4字节内存空间
    int arr[4] = {0};//一次性分配大量内存 元素类型一致
        //当做 - 其中有4个成员 - 每个成员为int类型
        //arr是数组的数据类型, 类型名称: int [4]
        数组元素 - 数据类型 - 天然确定的
        数组元素 - 名称 - 数组名[下标]
            arr[1]
    分配一段内存描述学生的信息
        年龄 学号 分数 姓名
    信息    数据类型
    年龄    unsigned char
    学号    unsigned int
    分数    double
    姓名    字符串
解决方法 - 结构体
1.结构体就是分配内存的第三种方式
2.结构体是开发人员自定义的[数据类型]
    本质上和int, char, double是一样的
    也可以去定义变量, 结构体类型变量

    结构体 是 数据类型

特点 -
1. 是由[若干成员]组成的自定义数据类型
    若干 - 可以自行设置 -
        成员数量 - 自定义
        成员类型 - 自定义
2.结构体变量 - 有地址吗 - 有 - 可以存吗 - 可以
    定义结构体变量指针 - 指向结构体变量
    结构体指针变量

定义变量 - 如何使用
三种方式
方式1 - 几乎很少用
    char name[32] = "xiaoming";
    //直接定义结构体数据类型的变量s1并且初始化
    struct {
        char name[32];
        int age;
    }s1 = {"小明", 19};
方式2 - 用的少
    //声明结构体数据类型
    struct student {
        char name[32];
        int age;
    };//struct student就是一个结构体数据类型, 后续的时候将其类比做int来使用
    struct student s1 = {"小明", 18};//类比:int s1;  //标记初始化，必须按照定义的顺序初始化
方式3 - 频率更高
    给已有的结构体数据类型起别名, 然后使用别名来定义变量
    typedef - 给数据类型起别名
    名字 : xxx_t

    typedef int s32;
    int val = 100;
    ==
    s32 val = 100;
    
    //声明结构体数据类型并且起别名
    typedef struct student {
        char name[32];
        int age;
    }stu_t;//struct student就是一个结构体数据类型,使用typedef给struct student类型区别名为stu_t
    stu_t s1 = {.age = 18 ，.name = "小明" };//类比:int s1; //标记初始化，可以不按照顺序初始化
    
    或
    struct student {
    char name[32];
    int age;
    };
    //给struct student数据类型起别名为stu_t
    typedef struct student stu_t;
    stu_t s[3] = {
        {.age = 20, .name = "刘备"},
        {.age = 19, .name = "关羽"},
        {.age = 18, .name = "张飞"}
    };

结构体数组 - 存储多个元素 - 多个学生的信息
结构体 - 数组 - 数组元素 - 都是结构体类型
    数组中所有元素类型相同
    结构体中成员可以不同

结构体和函数那点儿事
结构体作为函数的参数
    如果修改实参 - 传递指针变量
定义函数
    实参 - 输出 - 不改变
        变量 - 无法改变
        指针 - 可以改变
结构体作为函数的返回值

解决问题 :
    普遍性
    特殊性

结构体的嵌套结构体变量
    初始化 - 怎么初始化结构体变量 - 怎么初始化 - 结构体成员
typedef struct birthday {
    int year;
    int month;
    int day;
}bir_t;

//声明描述学生信息的结构体类型
typedef struct student{
    char name[32];
    int age;
    bir_t birth;//嵌套结构体成员变量
}stu_t;

    stu_t s1 = {"xiaobai", 5, {2017, 7, 31} };

s1.birth - ok
s1.birth.year

bir_t  b = {2017, 7, 31};
    b.year
    b.month
    b.day

职位:
总经理        - 经理 - 职员
总经理 - 助理 - 经理 - 职员

结构体对齐和补齐 - 结构体成员放置顺序不一样，结构体占用的内存就不一样。可以考虑从这个角度优化内存

对齐 -
四字节对齐 - 定义一个结构体变量 - 每4个字节作为一个单元
如果成员在一个单元不够放的话, 就会将其放到了下一个单元中
1字节成员 - 起始地址必须是1的整数倍
2字节成员 - 起始地址必须是2的整数倍
4字节成员 - 起始地址必须是4的整数倍
8字节成员 - 起始地址必须是4的整数倍

调整对齐方式
#pragma pack (n) 设置为n字节对齐
    n = 1 1字节对齐
    n = 2 2字节对齐
    n = 4 4字节对齐
    n = 8 8字节对齐
#pragma pack () 取消自定义对齐方式

    32位系统 4字节对齐 - 默认
    64位系统 8字节对齐 - 默认

cpp - c plus plus - 带类的C
核心 - 类
    更加强大的结构体

int arr[3] = {1,2,3};

char name[20] = "liming"; //strcpy

命令前面 - tab

练习 :
    从键盘获取两个点的坐标, 计算面积, 计算中心点的坐标, 计算周长
        使用结构体实现
