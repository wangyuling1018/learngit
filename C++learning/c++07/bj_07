笔记：
    1. 我和大家定制一个 君子协定

       【...】-  在this指针指向的内存空间中

    2. Human对象的几种定义方式：

        Human h; // 定义h,利用h.Human() --> h维护的内容为(无名,0)
        
        Human h2( 22, "张飞" ); // 定义h2,利用h2.Human(22,"张飞") --> h2维护的内容为(张飞,22)

    Human h3(h2); //= h2; // 定义h3,利用h3.Human(h2) --> h3维护内容 和 h2维护的内容相同
        
        Human h4; // 定义hi4,利用h4.Human() --> h4维护的内容为(无名,0)
        h4 = h3; // h4.operator=(h3)--> h4维护的内容 和 h3维护的内容 相同


构造函数
    构造函数可以重载 consover.cpp
        - 构造函数也可以通过参数表的差别化形成重载
        - 重载的构造函数，通过构造函数的实参类型进行匹配
        - 不同的构造函数，表示对象的不同创建方式
        - 使用缺省参数可以减少构造函数重载的数量
    构造函数分类
        多参构造函数:按多参方式构造
        无参(缺省)构造函数:按无参方式构造
        类型转换构造函数:利用不同类型的对象构造
        拷贝构造函数:利用相同类型的对象构造
    无参构造函数  defcons.cpp
        - 无参构造函数亦称缺省构造函数，但其未必真的没有任何参数，为一个有参构造函数的每个参数都提供一个缺省值，同样可以达到无参构造函数的效果
        - 如果一个类没有定义任何构造函数，那么编译器会为其提供个无参构造函数
            √对基本类型的成员变量进行定义，并初始化为随机数
            √对类类型的成员变量进行定义，调用相应类型的无参构造函数
        - 如果一个类定义了构造函数，无论这个构造函数是否带有参数，编译器都不会再为这个类再提供无参构造函数
        -有时必须为一个类提供无参的构造函数，仅仅因为它可能作为另外一个类的类类型成员变量  hastodef.cpp
    拷贝构造函数   copycons.cpp
        - 形如
            class 类名{
                类名(const类名& that){...}
            };
            的构造函数被称为拷贝构造函数。
        - 用于，利用一个已定义的对象，来定义其同类型的副本对象，即对象克隆
    拷贝构造函数  copycons.cpp
        -如果一个类没有定义拷贝构造函数，那么编译器会为其提供一个默认拷贝构造函数
            √对基本类型成员变量进行定义，并赋初值(按字节复制)
            √对类类型成员变量进行定义，并调用相应类型的拷贝构造函数
        -如果自己定义了拷贝构造函数，编译器将不再提供默认拷贝构造函数，这时所有与成员复制有关的操作，都必须在自定义拷贝构造函数中自己编写代码完成
        - 若默认拷贝构造函数不能满足要求，则需自己定义
    拷贝构造函数的调用时机  copvtime.cpp
        用已定义对象作为同类型对象的构造实参
        以对象的形式向函数传递参数
        从函数中返回对象
        注意:某些拷贝构造过程会因编译优化而被省略
    自定义构造函数和编译器定义构造函数
        自定义构造函数                             编译器定义构造函数
            无                                    缺省构造函数/缺省拷贝构造函数
         除拷贝构造函数以外的任何构造函数               缺省拷贝构造函数
            拷贝构造函数                              无
    //只要自定义了拷贝构造函数，编译器就不会塞任何构造函数。
    //构造函数包括无参构造函数（缺省构造函数）、拷贝构造函数、类型转换构造函数
    所有编译器定义的构造函数，其访问控制属性均为公有(public)


拷贝赋值函数  copyassignment.cpp
    - 形如
        class类名{
            类名& operator=(const 类名& that){ ...}
        };
        的函数被称为拷贝赋值函数，用于一个已定义的对象给同类型的对象赋值，即对象赋值
    - 如果一个类没有定义拷贝赋值函数，那么编译器会为其提供一个默认拷贝赋值函数
        √对基本类型成员变量，值传递(按字节复制)
    - 如果自己定义了拷贝赋值函数，编译器将不再提供默认拷贝赋值函数，这时所有与成员复制有关的操作,都必须在自定义拷贝赋值函数中自己编写代码完成
    - 若默认拷贝赋值函数不能满足要求时，则需自己定义

