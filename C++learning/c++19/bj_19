类型计算
    C语言: sizeof -计算类型的大小
    C++语言: typeid -可以获取类型的信息字符串
    C++11 : decltype-获取参数表达式的类型
    注意事项:类型计算由编译器确定，并不是运行期确定
    与类型推导相比 decltype1.cpp
        - 对类型的确定更加精准
            const int a= 10;
            auto b=a;//b类型推导为int
            decltype(a)c=a;//c类型计算为const int
        -可以做到类型相同但值不同
            const int a = 10;
            auto b= a;
            decltype(a)c= 100;
    三种类型计算的规则解  decltype2.cpp
        -标识符表达式，直接取表达式的类型
            int a;
            decltype(a) -> int
        -函数表达式，取函数返回值的类型
            int foo(int,int);
            decltype(foo(10,20))-> int
        -其他表达式，如果表达式的值为左值，取该左值引用的类型,如果表达式的值为右值,取该右值本身的类型;
    返回值后置  decltype3.cpp
        auto 函数名(形参表) -> decltype(表达式)
        
        
列表初始化
初始化初始化方法纷繁复杂
    -等号初始化   int a = 123;
    -小括号初始化 new double(1.23);
    -构造初始化  string c("123");
    - 花括号初始化
        struct Student d ={"张飞",20,{1997,10,10}};
        floate[] = {1.1,2.2,3.3};
    初始化方法大一统之列表初始化  list.cpp
        -基本类型，类类型，结构/联合/枚举类型等等的单个对象或对象数组，都可以采用形式完全统一的列表初始化语法进行对象的初始化
        -书写形式:类型 对象{初值表};
            int a{123};
            new double{1.23};
            string c{"123"};
            struct Studentd{"张飞",20,{1997,10,10}};
            floate[]{1.1,2.2,3.3};

Lambda表达式
    前情概述    typeoffunc.cpp
        C++语法中函数作用域中不能再定义函数，因此没有所谓局部函数的概念。
            void foo(void){
            ...
            int bar(intx, inty){
            reutrn x + y;
            }
            cout << bar(100,200) << endl;
            ...
        但函数作用域中可以有类型，当然也可以有表达式。
        
    语法规则解   lambda.cpp
        [捕获表] (参数表) 选项->返回类型
        {
            函数体;
        };
    表像
        lambda表达式的名称是一个表达式(外观类似函数) , 但本质绝非如此。
        
    本质
        lambda表达式本质其实是一一个类
        并且最终返回值为这个类的对象
        因此对lambda表达式的调用就是该对象的函数操作符的调用 //函数操作符（小括号操作符）

        
Lambda表达式
    可以没有返回值类型，将根据return推断
    如果连return也没有，则返回值为void
    参数为void可以省略不写的
    
    捕获表
        [] -不捕获任何外部变量
        [variable] - 捕获外部变量的值(具备只读属性)
        [&variable] -按弓用捕获，指定的外部变量
        [this] -捕获this指针，访问外部对象的成员
        [=] -按值捕获所有的外部变量，也包括this
        [&] -按引用捕获所有的外部变量，也包括this
        [=,&variable] -按值捕获所有的外部变量包括this，但是指定的外部变量按引用捕获。
        [&,=variable] -按引用捕获所有的外部变量，也包括this，但是指定的外部变量按值捕获。

