//
//  03_static2.cpp
//  C++learning
//
//  Created by 王育玲 on 2023/2/19.
//
#if 0

/*静态成员函数属于类，而不属于对象
 1.静态成员函数没有this指针，也没有常属性
 2.静态成员依然受类作用域和访问控制限定符的约束
 3.访问静态成员函数，既可以通过类也可以通过对象
 4.静态成员函数只能访问静态成员，而非静态成员函数既可以访问静态成员，也可以访问非静态成员
 */
//静态成员函数不属于对象，不需要对象去调用。普通成员函数也不属于对象，但是需要对象去调用。

//普通（非静态）成员函数：属于对象（指的是必须利用对象调用）  静态成员函数：不属于对象（不是必须利用对象调用）

//类的静态成员变量和静态成员函数，更像是普通的全局变量和全局函数，只是多了一层类作用域和访问控制限定符的约束，相当于具有成员访问属性的全局变量和全局函数

#include <iostream>
using namespace std;
class A {
public:
    int m_i; // 普通成员变量
    void foo(/* A* this */){ //普通成员函数 //编译器会给普通成员函数补this参数，所以必须要用对象调用
        cout << "foo is invoked" << endl;
        cout << m_si << endl; //ok，非静态成员函数内部既可以访问 非静态成员 也可以访问 静态成员
        cout << m_i << endl; //ok, //主要原因有this指针，但是我可以不用this
        bar(); //ok  //主要原因有this指针，但是我可以不用this
    }
    static int m_si; // 静态成员变量
    static void bar(/* 无this参数 */)/*无const限定*/{//静态成员函数 ////编译器不会给静态成员函数补this参数，所以不用对象调用
        cout << "bar is invoked" << endl;
        cout << m_si << endl; //ok，静态成员函数内部可以访问 静态成员
        //cout << m_i << endl; //error,静态成员函数内部 不可以访问 非静态成员 //主要原因是没有this指针
        //foo(); // error,静态成员函数内部 不可以访问 非静态成员  //主要原因是没有this指针
        
    }
};
int A::m_si = 0;

// 以上的代码模拟类的设计者(例如:类库、别人设计的类、自己设计的类)
// --------------------------------------
// 以下的代码模拟类的使用者
int main( void ) {
    A a, b;
    cout << "a对象的大小: " << sizeof(a) << endl;
    cout << "b对象的大小: " << sizeof(b) << endl;
    a.foo(); //编译器改书写，改成foo(&a); 因为要传形参a
    b.foo(); //编译器改书写，改成foo(&b); 因为要传形参b

    A::bar();//受到类的作用域约束，也受访问控制限定符的约束  --->属于类
    a.bar();//编译器改书写，改成A::bar()
    b.bar();//编译器改书写，改成A::bar()
    
    return 0;
}
#endif


