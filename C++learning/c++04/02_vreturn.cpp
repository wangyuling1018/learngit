//
//  02_vreturn.cpp
//  C++learning
//
//  Created by 王育玲 on 2023/2/18.
//

/*
                内存生命周期            使用范围
局部变量            函数/块              函数/块
静态局部变量         程序                函数/块
全局变量            程序                所有文件（外部变量）
静态全局变量         程序                定义文件
全局函数            程序                所有文件
静态全局函数         程序                定义文件
 
动态内存
     生命周期 - 这块内存空间何时消亡
         1.调用free函数后 - 该内存会被释放
         2.程序结束
 */

#if 0
//引用 作为 函数的返回值

//引用型的返回值，从函数中返回引用，一定要保证在函数返回以后，该引用的目标依然有效
//引用型返回值，可以拿到函数返回值的别名。
#include <iostream>
using namespace std;

int g_value = 0;
int& foo(){//非常引用型的返回值，可以拿到函数返回值的别名 //非常引用返回值：通过引用可以修改目标
    return g_value;//可以返回全局变量的引用（别名）
}
const int& fooo(){//常引用型的返回值，可以拿到函数返回值的别名 //常引用返回值：通过引用不可以修改目标
    return g_value;//可以返回全局变量的引用（别名）
}

int& bar(){//引用型的返回值，可以拿到函数返回值的别名
    static int s_value = 0;//静态局部变量，这句代码在程序启动的时候就执行了，而且只执行一次，不是每次调用bar函数都执行一次这句代码
    //静态局部变量执行比bar函数执行时间早的多，甚至main函数还没执行的时候，静态局部变量已经执行了，静态局部变量是进程级的生命周期
    cout << "s_value=" << s_value << endl;
    return s_value;//可以返回静态局部变量的引用（别名）
}

int& hum(){//引用型的返回值，可以拿到函数返回值的别名
    int* pi = new int;
    return *pi;//可以返回在堆中动态创建的对象的引用（别名）
}

int& fun(int& x){//引用型的返回值，可以拿到函数返回值的别名
    return x;//可以返回引用型参数的引用（别名）
}

int& boo(){//引用型的返回值，可以拿到函数返回值的别名
    int m = 8888;
    return m;//不可以返回局部变量的引用（别名），C语言中不可以返回局部变量的地址  //因为局部变量的生命周期是函数块
}

//以上代码模块库
//..............................
//以下代码模拟用户
int main(void){
    foo();// foo()是g_value的别名,main函数并不会在foo函数这里开辟一块无名内存了
    //执行到foo函数的时，会跳转到foo函数中执行，执行完成后，再跳转回来，跳转回main那一刻，foo()就是g_value的别名了
    foo() = 100;// foo()是g_value的别名，修改了全局变量的值  //函数返回谁，函数名称就是谁的别名
    cout << "g_value=" << g_value << endl;
    
    bar() = 200;//bar()是s_value的别名，修改了静态局部变量的值 //函数返回谁，函数名称就是谁的别名
    bar();
    
    hum() = 300;//hum()是动态创建内存的别名，300会存入16个字节的堆内存中 //函数返回谁，函数名称就是谁的别名
    
    int a_value = 0;
    fun(a_value) = 400;//fun(a_value)是a_value的别名，修改了引用型参数 //函数返回谁，函数名称就是谁的别名
    cout << "a_value=" << a_value << endl;
    
    boo();//boo()函数执行完，局部变量m就释放了，boo()是一个不存在内存的别名，就有问题了
    
    //fooo() = 6666;//error ，常引用返回值：通过引用不可以修改目标
    return 0;
}

#endif

