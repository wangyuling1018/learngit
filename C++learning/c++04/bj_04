笔记：
    1. C语言中 只要涉及到数据传递(例如：初始化、赋值、传参、返回值) 都是 值传递(将数据复制一份给别人)
      
        void foo( int x ) {.....}

        int bar( ) {
              int m = 800;
              return m;
        }

        int main( void ) {
            int a = 10; // 初始化
            a = 20; // 赋值
            foo( a ); // 传参
            /*|800|*/ bar( ); // 返回值
        }

        C++语言 因为有了 引用这个语法特性，所以C++程序可以不做值传递

    2. 动态类型转换???????????????????( 第15次课会讲到 )

    3. 静态类型转换的第二个应用场景：自定义转换？？？？？？？（第8次课会讲到）

    4. 什么面对象对象

    5. 为什么要面向对象？
        C语言处理问题（思想：分而治之，强调拆分，面向问题域）

       a+b-(c-d)*(e/f);
       a*b/（c/d）+（e*f）;

       C++语言处理问题（思想：大处着眼）
       
       a+b-(c-d)*(e/f);
       制作一个计算器
        a*b/（c/d）+（e*f）;

引用的应用
    引用型参数，函数的形参是实参的别名，避免对象复制的开销
        非常引用型参数
            - 在函数中修改实参值   vparam.cpp
        常引用型参数
            - 防止对实参的意外修改  vparam.cpp
            - 接受常量型实参
    弓用型的返回值，从函数中返回引用，一定要保证在函数返回以后，该引用的自标依然有效
        - 可以返回全局、静态变量的引用
        - 可以返回成员变量的引用
        - 可以返回在堆中动态创建的对象的引用
        - 可以返回调用对象自身的引用
        - 可以返回引用型参数本身
        - 不能返回局部变量的引用
    非常引用型返回值
        - 通过引用可以修改目标
    常引用型返回值
        - 通过引用不能修改目标
    在实现层面，引用就是指针，但在C++语言层面，引用不是实体类型，因此C++语言层面引用与指针存在明显的差别。  poi_ref.cpp
        -指针可以不初始化，而引用必须初始化。
        -指针的目标可在初始化后随意变更(除非是指针常量),而引用一旦初始化就无法变更其目标
        -存在空指针，不存在空引用
        -存在指向指针的指针，不存在引用的引用
        -存在指针的引用，不存在引用的指针
        -存在指针数组，不存在引用数组，但存在数组引用

类型强转
    显式类型转换  convert.cpp
        C风格的显式类型转换
            -(目标类型)源类型变量
        C++风格的显式类型转换
            -目标类型(源类型变量)
        静态类型转换                                  //应用场景最广泛：指针、引用、其他变量等
            - static_cast< 目标类型> (源类型变量)
            - 隐式类型转换的逆转换
            - 自定义类型转换
        动态类型转换                                  //应用：指针、引用
            - dynamic_cast< 目标类型> (源类型变量)
            - 多态父子类指针或引用之间的转换
        常类型转换                                   //应用：指针、引用
            - const_cast< 目标类型> (源类型变量)
            - 去除指针或引用上的const属性
        重解释类型转换                                 //应用：指针、引用、指针和整型之间
            - reinterpret_cast< 目标类型> (源类型变量)
            - 任意类型的指针之间的转换或引用之间的转换
            - 任意类型的指针和整型之间的转换
        //能用静态类型转换 、动态类型转换、常类型转换就用这3种类型转换，不能用前3种类型转换，才用重解释类型转换
        //静态类型转换 、动态类型转换、常类型转换、重解释类型转换，都是c++温和的类型转换


面向对象
什么是面向对象WHAT?
    万物皆对象，这是人类面对世界最朴素，最自然的认知、感觉。
    把大型软件看成是由多个对象组成的团队。
    对象拥有足够的智能，能够理解来自其它对象的信息，并以适当的行为作出反应。
    对象能够从高层对象继承属性和行为，并允许低层对象从自己继承属性和行为等
    面向对象的三大要件:封装、继承和多态
为什么要面向对象_ -WHY?
    相比于分而治之的结构化程序设计，强调大处着眼的面向对象程序设计思想，更适合于开发大型软件
    得益于代码复用等面向对象的固有特征，软件开发的效率获得极大地提升，成本却大幅降低
    面向对象技术的表现如此出众，以至于那些原本并不直接支持面向对象特性的语言(例如C)，也在越来越多地通过各种方法模拟一些面向对象的软件结构
怎样面向对象-HOW?
    至少掌握一种面向对象的程序设计语言，如C++
    深入理解封装、继承和多态等面向对象的重要概念
    学习设计模式，源自多年成功经验的积累和总结

