//
//  03_poi_ref.cpp
//  C++learning
//
//  Created by 王育玲 on 2023/2/18.
//
#if 0

/*
 在实现层面，引用就是指针，但在C++语言层面，引用不是实体类型，因此C++语言层面引用与指针存在明显差别
 1.指针可以不初始化，而引用必须初始化
 2.指针的目标可在初始化后随意变更（除非是指针常量），而引用一旦初始化就无法变更其目标
 3.存在空指针，不存在空引用
 4.存在指向指针的指针，不存在引用的引用
 5.存在指针的引用，不存在引用的指针
 6.存在指针数组，不存在引用数组，但存在数组引用
 */


//引用和指针的差别
//根本区别就是指针占内存，引用不占内存，所有的差别都是围绕这个来的。
#include <iostream>
using namespace std;

//以上代码模块库
//..............................
//以下代码模拟用户
int main(void){
    int a = 10, b = 20;
    int* pa = &a;//指针可以不初始化，也可初始化
    pa = &b;//指针在初始化之后，可以随意变更其所指向的内存 //朝三暮四
    
    int& ra = a;//引用必须初始化
    ra = b;//引用在初始化之后，不可以变更其所指向的内存   //从一而终
    
    pa = NULL; //存在空指针
    //ra = NULL; //error，不存在空引用
    
    int** ppa = &pa; //存在二级指针
    //int&& rra = ra; //error,不存在二级引用
    
    //存在指针的引用：指针本身是占内存的，给指针起别名，没有问题
    //不存在引用的指针：引用本身不占用内存，怎么取地址呢？
    int*& rpa = pa;//存在指针的引用
    //int&* pra = &ra;//error,不存在引用的指针
    int* pra = &ra;//ok,这里获取的并不是引用的指针，而是引用的目标内存a的地址
    
    //存在指针数组：本质是一个数组，数组的每个元素存的是指针
    //不存在引用数组：一个数组中每个元素存的是引用，数组占据的是一块连续的内存空间，引用不占内存，数组存了一堆不占内存的东西？
    int x,y,z;
    int* p[3] = {&x,&y,&z};//存在指针数组
    //int& r[3] = {x,y,z};//error，不存在引用数组
    
    //存在数组引用：给数组取一个别名
    int arr[3];
    int(&rarr)[3] = arr; //存在数组引用
    
    return 0;
}

#endif

