//
//  01_clsbase.cpp
//  C++learning
//
//  Created by 王育玲 on 2023/2/18.
//



//面向对象的思想：C++、java等语言
//面向对象的三大要件：封装、继承、多态
//设计模式：大牛总结的编程技巧、窍门。工作2-3年后再学习
/*
 为什么要面向对象？
 C语言处理问题（思想：分而治之，强调分析，面向问题域） 缺点：代码不能复用（写一个程序只能解决一个问题）
 C++语言处理问题（思想：大处着眼） 优点：代码复用性更好（写一个程序可以解决很多问题，提高了开发效率）
 
 抽象事物：抽取事物的特征
 类：抽取事物特征的规则。（例如 你给计算机按照一套规则（犬种、犬龄、体重、毛色等）介绍狗）
 在代码中落地的时候，类就是一个复合的数据类型。（例如struct）
 在C++中class和struct相似程度99.9%，只有一丢丢区别（访问控制限定符不一样）。

 定义xxxx：就是给xxxx分配内存空间。
 
 访问控制限定符：
 public：公有成员，谁都可以访问
 protected：保护成员，只有自己和子类可以访问
 private：私有成员，只有自己可以访问
 
 struct的默认访问控制限定符是public
 class的默认访问控制限定符是private
 
 为了让用户在外部可以访问私有成员 必须提供一个公有桥梁函数

 编译器是单向编译器，从上往下编译，有时候也会打破这个，但大致是从上往下编译的
 当编译器 编译类 的时候，先编译成员变量 再编译 成员函数，所以public写在privte上面 也可以访问private中的成员变量

 */

#if 0

//类：抽取事物特征的规则
#include <iostream>
using namespace std;

//struct Human{
class Human{
public:
    void setinfo(int age = 0, const char* name = "无名"){//为了让用户在外部可以访问私有成员 必须提供一个公有桥梁函数
        m_age = age;
        strcpy(m_name,name);
    }
    
    void getinfo(){//为了让用户在外部可以访问私有成员 必须提供一个公有桥梁函数
        cout << "姓名：" << m_name << "，年龄：" << m_age << endl;
    }
    
private:
    int m_age;
    char m_name[256];
};



//以上代码模块库
//..............................
//以下代码模拟用户
int main(void){
    Human h;//定义h（给h分配内存空间）
            //在h中所占内存空中定义m_age（给m_age分配内存空间）初值为随机数
            //在h中所占内存空中定义m_name（给m_name分配内存空间）初值为随机数
    cout << "h的大小：" << sizeof(h) << endl; //260个字节
    
    h.setinfo(22，"张飞");//为了让用户在外部可以访问私有成员 必须提供一个公有桥梁函数
    h.getinfo();//为了让用户在外部可以访问私有成员 必须提供一个公有桥梁函数
    
    //h.m_age = 22; //外部不能访问类的私有成员
    //strcpy(h.m_name, "张飞");//外部不能访问类的私有成员
    //cout << "姓名：" << m_name << "，年龄：" << m_age << endl; //外部不能访问类的私有成员
    
    
    return 0;
}

#endif

