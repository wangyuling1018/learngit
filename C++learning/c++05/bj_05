笔记：
    5. 为什么要面向对象？
        C语言处理问题（思想：分而治之，强调拆分，面向问题域）

       a+b-(c-d)*(e/f);
       a*b/（c/d）+（e*f）;

       C++语言处理问题（思想：大处着眼）
       
       a+b-(c-d)*(e/f);
       制作一个计算器
        a*b/（c/d）+（e*f）;
        
    1. 抽象事物：抽取事物的特征
       类：抽取事物特征的规则（作用）
       在代码中落地的时候，类就是一个复合的数据类型(例如：struct)

    2. 定义xxx : 就是给xxx分配内存空间

    3. 当编译器 编译 类的时候，先编译 成员变量  再编译 成员函数

    4. 哪个对象 调用 成员函数，成员函数的this形参 就指向 哪个对象***************************************************************************
        成员函数内部，都是通过 this指针 访问 成员变量.

    5. 对象 和 函数
       非常对象（不挑食）优先选择非常函数，也可选择常函数
       常对象（很挑食）只能选择常函数


面向对象
什么是面向对象---WHAT?
    万物皆对象，这是人类面对世界最朴素，最自然的认知、感觉。
    把大型软件看成是由多个对象组成的团队。
    对象拥有足够的智能，能够理解来自其它对象的信息，并以适当的行为作出反应。
    对象能够从高层对象继承属性和行为，并允许低层对象从自己继承属性和行为等
    面向对象的三大要件:封装、继承和多态
为什么要面向对象---WHY?
    相比于分而治之的结构化程序设计，强调大处着眼的面向对象程序设计思想，更适合于开发大型软件
    得益于代码复用等面向对象的固有特征，软件开发的效率获得极大地提升，成本却大幅降低
    面向对象技术的表现如此出众，以至于那些原本并不直接支持面向对象特性的语言(例如C)，也在越来越多地通过各种方法模拟一些面向对象的软件结构
怎样面向对象---HOW?
    至少掌握一种面向对象的程序设计语言，如C++
    深入理解封装、继承和多态等面向对象的重要概念
    学习设计模式，源自多年成功经验的积累和总结
类和对象
    类是抽象事物的套规则.
    类是一种用户自定义的复合数据类型，即包括表达属性的成员变量，也包括表达行为的成员函数
    类可用于表达那些不能直接与内置基本类型建立自然映射关系的逻辑抽象
    类是现实世界的抽象，对象是类在虚拟世界的实例
    
类的定义   clsbase.cpp
    访问控制限定符
    public
        公有成员
        谁都可以访问
    protected
        保护成员
        只有自己和子类可以访问
    private
        私有成员
        只有自己可以访问
        
访问控制限定符
    -在C++中，类(class)和结构(struct)已没有本质性的差别，唯一的不同在于
        √类的缺省访问控制属性为私有(private)
        √结构的缺省访问控制属性为公有(public)
    -访问控制限定符仅作用于类，而非作用于对象。
    -对不同成员的访问控制属性加以区分，体现了C++作为面向对象程序设计语言的封装特性

成员函数参数--this
    C++对象模型  this.cpp
        -同一个类的不同对象各自拥有一份独立的成员变量。
        -同一个类的不同对象彼此共享同一份成员函数。
        -那么在代码区中，被同一个类的不同对象所共享的成员函数，在这些成员函数内部，如何区分其所访问的成员变量隶属于哪个对象?
    C++成员函数模型
        -类的每个成员函数(除静态成员函数外)，都有一个隐藏的指针型参数，形参名为this，指向调用该成员函数的对象，这就是this指针.
        -在类的成员函数中(除静态成员函数外)，对所有成员的访问，都是通过this指针进行的
    this指针的应用
        -多数情况下，程序并不需要显式地使用this指针
        -有时为了方便，将类的成员变量与该类成员函数的参数取相同标识符，这时在成员函数内部，可通过this指针将二者加以区分
        -返回基于this指针的自引用，以支持串连调用- 将this指针作为函数的参数，以实现对象交互

常对象  usethis.cpp
    被const关键字修饰的对象、对象指针或对象引用，统称为常对象
        - const User user;
        - const User* cptr = &user;
        - const User& cref = user;
        
常函数  usethis.cpp
    在类成员函数的形参表之后，函数体之前加上const关键字，该成员函数的this指针即具有常属性，这样的成员函数被称为常函数
        class 类名{
            返回类型 函数名(形参表) const{
            函数体;
            }
        };

常函数与常对象  usethis.cpp
    原型相同的成员函数，常版本和非常版本构成重载
        - 非常对象优先选择非常版本，如果没有非常版本，也能选择常版本
        - 常对象只能选择常版本
    在常函数内部无法修改成员变量的值，除非该成员变量被mutable关键字修饰

