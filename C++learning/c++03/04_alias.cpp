//
//  04_alias.cpp
//  C++learning
//
//  Created by 王育玲 on 2023/2/18.
//

#if 0

//引用：一块内存的别名
//&的前面什么都没有，作用是取地址的意思
//&的前面有类型，作用就是引用的意思

//没有引用的引用

//右值只能用常引用作为别名
//引用可以延长右值的生命周期
//引用可以作为左值(非常左值、常左值)、右值的引用，所以常引用是万能引用

/*常引用 和 常指针
 常引用 即 万能引用（可以引用 非常左值、常左值、右值）
    int a = 10;
    const int& cra = a;//但是如果常引用 引用的是 非常左值，通过别名将丧失修改目标内存的权限
    
 常指针 即 万能指针（可以指向 非常左值、常左值、右值）
    int a = 10;
    const int* pra = &a;//但是如果常指针 指向的是 非常左值，通过常指针将丧失修改目标内存的权限
 */

#include <iostream>
using namespace std;

//以上代码模块库
//..............................
//以下代码模拟用户
int main(void){
    int a = 10;
    int &b = a;//这并不是利用a的数据给b赋值，而应该理解为 引用b是a所代表的内存的别名
    
    b = 20; //对引用b赋值，其实就是对b的目标内存a赋值
    cout << "a=" << a <<" ,b=" << b << endl;//读取引用b的值，其实就是在读取引用b的目标内存a的值
    cout << "&a=" << &a << " ,&b=" << &b << endl;//取引用b的地址，其实取的是引用b的目标内存a的地址
    
    //int& c; //error，引用必须指明别名。必须初始化。
    
    int c = 80;
    b = c; //不要理解为引用b的目标变为c，应该理解为 用c中的数据给引用b的目标内存a赋值。//引用不能更换目标
    cout << "a=" << a <<" ,b=" << b <<",c=" << c << endl;
    cout << "&a=" << &a << " ,&b=" << &b << " ,&c=" << &c << endl;
    
    int &d = b;//操作b就是操作目标内存a //对引用的所有操作都是在对目标内存的操作
    //不要理解为d是b的引用，而应该理解为d和b都是a的别名
    cout << "a=" << a <<" ,b=" << b <<",d=" << d << endl;
    
    const int e = 10; //通过真名不让改，那么通过别名也应该不让修改
    //int& f = e;//error，别名不能比真名限定的更加宽松
    const int& g = e;//别名的常属性要和目标常属性保持一致
    
    const int&h = a;//别名可以比真名限定的更加严格

    return 0;
}
/*运行结果：
 a=20 ,b=20
 &a=0x7ff7bfeff3c8 ,&b=0x7ff7bfeff3c8
 a=80 ,b=80,c=80
 &a=0x7ff7bfeff3c8 ,&b=0x7ff7bfeff3c8 ,&c=0x7ff7bfeff3bc
 a=80 ,b=80,d=80
 */

#endif

