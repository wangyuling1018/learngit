//
//  03_lrvalue.cpp
//  C++learning
//
//  Created by 王育玲 on 2023/2/18.
//

#if 0
//左值：能够取地址的 &
//右值：不能取地址的


#include <iostream>
using namespace std;

void foo(){
    int m = 100;
    return m;
}
//以上代码模块库
//..............................
//以下代码模拟用户
int main(void){
    //函数的生命期
    //具名内存，右名字的--->能够取地址 ---->左值，
    //左值又分为2种：非常左值（无const修饰），常左值（const修饰）
    int a = 10;
    &a;
    a = 15;//可以修改，非常左值
    int& ra = a;//ok，引用
    const int& cra = a;//ok，引用更加严格，可以
    
    const int b = 20;
    &b;
    //b = 15；//不可以修改，常左值ß
    //int& rb = b;//error，引用更加宽松，不可以
    const int& rb = b;//ok，引用
    
    //匿名内存，没有名字---->不能取地址---->右值
    //直接更改右值毫无意义,是98/03标准给出的结论，右值的生命周期很短，过了分号就死。语句级生命期。
    //右值只能用常引用作为别名
    //引用可以延长右值的生命周期
    //引用可以作为左值(非常左值、常左值)、右值的引用，所以常引用是万能引用
    10;
    //&10；//error
    //int& ri = 10;//error,10不让修改，通过别名又可以修改了，会报错
    const int& ri = 10;//ok，加const修饰，通过别名也不能修改，就可以编译通过了 //常引用
    //别名ri的生命周期是main的生命周期了，那么10的生命周期也就延长了
    
    //函数的返回值也是匿名内存
    /*|返回值100的内存|*/foo(); //(1)分配一块内存空间 （2）生成跳转指令
    //&foo();//error，直接更改右值毫无意义
    //foo() = 15;//error,直接更改右值毫无意义
    //int& fi = foo();//error，函数返回值不让修改，通过别名又可以修改了，会报错
    const int& fi = foo();//ok，加const修饰，通过别名也不能修改，就可以编译通过了 //常引用
    //别名fi的生命周期是main的生命周期了，那么函数foo()的生命周期也就延长了
    
    return 0;
}
#endif

