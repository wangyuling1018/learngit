混合方式UI设计
    1、拖拽控件的方式设计UI   --方便
    2、纯手工写代码设计控件   --麻烦
    3、混合方式：拖拽控件 + 纯手写控件
    
主窗口
    QMainWindow
    
    菜单栏
        一个菜单项  == QAction动作对象
        点击按钮 == 快捷键 == 绑定同一个QAction动作，实现执行的动作是相同的
    工具栏
        窗口有多个工具栏
        一个工具项 == QAction动作对象
        点击按钮 == 快捷键 == 绑定同一个QAction动作，实现执行的动作是相同的
        工具项显示：图标 + 文本
        
    QAction
        信号：
            triggered()    //常用  英译：触发
            triggered(bool) //常用
案例：

    ui布局：
        QtCreator工具栏 -》 视图 -〉Action Editor 勾选 -》 新建Action -〉拖拽Action到UI窗口的工具栏
        QtCreator工具栏 -》 视图 -〉Signals & Slots Editor 勾选 -》 点击“+”，添加信号和槽的连接
        
    头文件：
        #include <QLabel>
        #include <QSpinBox>
        #include <QFontComboBox> //字体组合框（下拉列表）
        
        private slots:
            void on_actFontBold_toggled(bool arg1);

            void on_actFontBold_triggered(bool checked);

            void on_actFontItalic_triggered(bool checked);

            void on_actFontUnderline_triggered(bool checked);

            void on_textEdit_selectionChanged();

            void on_textEdit_copyAvailable(bool b);

            //自定义槽函数
            //设置字体大小
            void on_spinFontSize_valueChanged(int fontSize);
            //选择字体类型
            void on_fontCmb_currentIndexChanged(const QString& fontFamily);
            void on_actToolbarLab_triggered(bool checked);

        private:
            void initUi();//代码方式初始化界面
        private:
            QLabel* labelCurFile;  //状态栏中显示当前文件的label
            QSpinBox* spinFontSize; //工具栏上选择字体大小的选值框
            QFontComboBox* fontCmb; //工具栏上选择字体类型的下拉列表
    
        cpp文件：
            构造函数：
                 initUi();
                //信号和槽函数的连接
                connect(spinFontSize,SIGNAL(valueChanged(int)),this,SLOT(on_spinFontSize_valueChanged(int)));
                connect(fontCmb,SIGNAL(currentIndexChanged(int)),this,SLOT(on_fontCmb_currentIndexChanged(QString)));
            
            //代码方式初始化界面
            void MainWindow::initUi(){
                //状态栏上添加控件
                labelCurFile = new QLabel;
                labelCurFile->setText("当前文件：");
                labelCurFile->setMinimumWidth(300);
                ui->statusbar->addWidget(labelCurFile); //添加到状态栏

                //工具栏上添加控件
                ui->toolBar->addWidget(new QLabel("   字体大小："));

                spinFontSize = new QSpinBox;
                spinFontSize->setMinimumWidth(50);
                spinFontSize->setRange(8,48);
                spinFontSize->setValue(ui->textEdit->font().pointSize());//将textEidt的字体大小作为spinFontSize的当前值
                ui->toolBar->addWidget(spinFontSize);

                ui->toolBar->addWidget(new QLabel("   字体："));

                fontCmb = new QFontComboBox;
                fontCmb->setMinimumWidth(150);
                ui->toolBar->addWidget(fontCmb);

                //设置中心控件
                setCentralWidget(ui->textEdit);
            }

            //粗体
            void MainWindow::on_actFontBold_triggered(bool checked)
            {
                QTextCharFormat fmt;
                if(checked){ //字体粗体与正常之间切换
                    fmt.setFontWeight(QFont::Bold); //设置粗体
                }else{
                    fmt.setFontWeight(QFont::Normal);//字体正常
                }
                ui->textEdit->mergeCurrentCharFormat(fmt);
            }

            //斜体
            void MainWindow::on_actFontItalic_triggered(bool checked)
            {
                QTextCharFormat fmt;
                fmt.setFontItalic(checked);
                ui->textEdit->mergeCurrentCharFormat(fmt);
            }

            //下划线
            void MainWindow::on_actFontUnderline_triggered(bool checked)
            {
                QTextCharFormat fmt;
                fmt.setFontUnderline(checked);
                ui->textEdit->mergeCurrentCharFormat(fmt);
            }

            //更新粗体、斜体、下划线 三个QAction的checked的属性
            void MainWindow::on_textEdit_selectionChanged()
            {
                //粗体、斜体、下划线 三个按钮选中状态，随着选择的翁
                QTextCharFormat fmt;
                fmt = ui->textEdit->currentCharFormat();//获取当前选中文本的格式
                ui->actFontBold->setChecked(fmt.font().bold());//当前选中文本的格式，如果是粗体，就设置按钮是选中状态；如果不是粗体，按钮就不是选中状态
                ui->actFontItalic->setChecked(fmt.fontItalic()); //设置斜体
                ui->actFontUnderline->setChecked(fmt.fontUnderline()); //设置下划线
            }

            //更新剪切、复制、粘贴的enabled的属性
            void MainWindow::on_textEdit_copyAvailable(bool b)
            {
                //要选中文本，才能剪切、复制、粘贴
                ui->actCut->setEnabled(b);
                ui->actCopy->setEnabled(b);
                ui->actPaste->setEnabled(ui->textEdit->canPaste());
            }

            //设置字体大小
            void MainWindow::on_spinFontSize_valueChanged(int fontSize){
                QTextCharFormat fmt;
                fmt.setFontPointSize(fontSize);
                ui->textEdit->mergeCurrentCharFormat(fmt);

            }
            //选择字体类型
            void MainWindow::on_fontCmb_currentIndexChanged(const QString& fontFamily){
                QTextCharFormat fmt;
                fmt.setFontFamily(fontFamily);
                ui->textEdit->mergeCurrentCharFormat(fmt);
            }

            //显示工具栏文字标签
            //方式一：可以通过代码方式。方式二：通过ui设置工具栏的属性toolButtonStyle
            void MainWindow::on_actToolbarLab_triggered(bool checked)
            {
                if(checked)
                    ui->toolBar->setToolButtonStyle(Qt::ToolButtonTextUnderIcon);
                else
                    ui->toolBar->setToolButtonStyle(Qt::ToolButtonIconOnly);

            }


                    
                    

                
