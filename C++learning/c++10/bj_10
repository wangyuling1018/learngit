笔记：
    1. 操作符重载：重新定义操作符的运算规则，一旦重新定义操作符的运算规则，可以使我们自己设计的类型也和基本类型一样参与各种运算符表达式

      int a=5, b=8;
      a + b;  //  基本类型 编译器 知道 按照什么规则做加法（求和）

      Human c, d;
      c + d; // 自己设计的类型 编译器本身并不知道按照什么规则做加法（求和），规则需要自己来指定

    2. 前++  和   后++
       
       在C语言中    前++：先加1再使用             后++：先使用再加1

       在C++语言中  不管前++还是后++ 都是直接加1（内部实现和C语言并不相同），但是C++语言还想让用户 感觉和c语言一样。


操作符重载
操作符标记与操作符函数
    操作符标记
        - 单目操作符: -、 ++、-、*、->等
        - 双目操作符: +、一、 >、<、+=、-=、>>、<<等
        - 三目操作符:?:
    操作符函数 complex.cpp
        - 在特定条件下，编译器有能力把一个由操作数和操作符组成的表达式，解释为对一个全局函数的调用或解释为对一个成员函数的调用，该全局函数或成员函数被称为操作符函数
        - 通过定义操作符函数，可以实现针对自定义类型的运算法则，并使之与内置类型一样参与各种表达式
    双目操作符表达式: L#R   //#：表示操作符标记
        - 成员函数形式: L.operator# (R)
            左操作数是调用对象，右操作数是参数对象
        - 全局函数形式: operator#(L, R)
            左操作数是第一参数, 右操作数是第二参数
    单目操作符表达式: #O/O#
        - 成员函数形式: O.operator#()
        - 全局函数形式: operator#(O)
    三目操作符表达式: F#S#T
        - 无法重载


典型双目操作符的重载
    运算类双目操作符:+、 *、/等             doubleoperator1.cpp
        - 左右操作数均可以为非常左值、常左值或右值
        - 表达式的结果为右值
    赋值类双目操作符:=、+=、-=、*=、/=等    doubleoperator2.cpp
        - 右操作数可以为非常左值、常左值或右值，但左操作数必须为非常左值
        - 表达式结果为左操作数本身(而非副本)
    比较类双目操作符: >、< ==、<=、>=等     doubleoperator3.cpp
    - 左右操作数为非常左值、 常左值或右值，
    - 表达式结果为 bool


友元
    可以通过friend关键字，把一个全局函数、另一个类的成员函数或者另一个类整体，声明为授权类的友元
    友元拥有访问授权类任何非公有成员的特权
    友元声明可以出现在授权类的公有、私有或者保护等任何区域，且不受访问控制限定符的约束
    友元不是成员，其作用域并不隶属于授权类，也不拥有授权类类型的this指针。

典型单目操作符的重载
    运算类单目操作符:-、~、!等         singleoperator1.cpp
        - 操作数为非常左值、常左值或右值
        - 表达式的结果为右值
    前自增减类单目操作符:前++、前--      singleoperator2.cpp
        - 操作数为非常左值
        - 表达式的结果为操作数本身(而非副本)
    后自增减类单目操作符:后++、后--       singleoperator2.cpp
    - 操作数为非常左值
    - 表达式的结果为右值，且为自增减以前的值

