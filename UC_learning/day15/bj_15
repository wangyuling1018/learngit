GDB：
    GDB是linux的程序调试工具
    逻辑错误调试步骤：
        1、编译时: gcc -g xxx.c
        2、命令: gdb a.out
            l - 显示出代码
            b - 设置断点 // b main，main函数开始断点 //b 8，第8行设置断点
            r - 运行程序
            n - 单步执行
            p - 打印变量的值 //p + 变量名
            c - 运行到下一个断点
            q - 退出
转储文件：
    命令：ulimit -a
        (base) 176x212x32x15:day14 wyl$ ulimit -a
        core file size          (blocks, -c) 0         //可以修改转储文件的大小
        data seg size           (kbytes, -d) unlimited
        file size               (blocks, -f) unlimited
        max locked memory       (kbytes, -l) unlimited
        max memory size         (kbytes, -m) unlimited
        open files                      (-n) 256
        pipe size            (512 bytes, -p) 1
        stack size              (kbytes, -s) 8192
        cpu time               (seconds, -t) unlimited
        max user processes              (-u) 2784
        virtual memory          (kbytes, -v) unlimited

    修改：ulimit -c 1024
        (base) 176x212x32x15:day14 wyl$ ulimit -a
        core file size          (blocks, -c) 1024         //修改后
        data seg size           (kbytes, -d) unlimited
        file size               (blocks, -f) unlimited
        max locked memory       (kbytes, -l) unlimited
        max memory size         (kbytes, -m) unlimited
        open files                      (-n) 256
        pipe size            (512 bytes, -p) 1
        stack size              (kbytes, -s) 8192
        cpu time               (seconds, -t) unlimited
        max user processes              (-u) 2784
        virtual memory          (kbytes, -v) unlimited
    命令:./a.out
         ls  - 可以看到转储core文件
    core是二进制文件，只能通过gdb查看：gdb -corefile core
    转储文件里面记录了什么原因产生的转储文件
            

太平间信号
    ●如前所述，无论一个进程是正常终止还是异常终止，都会通过系统内核向其父进程发送SIGCHLD(17)信号。父进程完全可以在针对SIGCHLD(17)信号的信号处理函数中，异步地回收子进程的僵尸，简洁而又高效
        void sigchld (int signum){
            pid_t pid = wait(NULL);
            if (pid == -1){
                perror ("wait");
                exit (EXIT_FAILURE);
            }
            printf ("%d子进程终止\n",pid);
        }

    ●但这样处理存在一一个潜在的风险，就是在sigchld信号处理函数执行过程中，又有多个子进程终止，由于SIGCHLD(17)信号不可靠， 可能会丢失，形成漏网僵尸，因此有必要在一一个循环过程中回收尽可能多的僵尸
        void sigchld (int signum) {
            for (;;) {
                pid_t pid = wait (NULL);
                if(pid == -1){
                    if (errno != ECHILD) {
                        perror ("wait");
                        exit (EXIT_FAILURE);
                        }
                    printf ("子进程都死光了\n"); break;
                }
                printf (" %d子进程终止\n", pid);
            }
        }

    ●但上面的代码同样存在问题，因为当所有的子进程都处于运行状态时wait函数会阻塞,这时sigchld信号处理函数就不会返回，被信号中断的操作也就无法继续。为此，可以考虑用具有非阻塞特性的waitpid函数取代wait函数
        void sigchld (int signum){
                for (;;){
                    pid_t pid = waitpid (-1,NULL, WNOHANG);
                    if (pid==-1){
                        if (errno!= ECHILD){
                            perror ("wait");
                            exit (EXIT_FAILURE);
                        }
                        printf("子进程都死光了\n"); break;
                    }
                    if (!pid) break;
                printf ("%d子进程终止\n",pid);
                }
        }
        笔记：
            1、17号信号就是太平间信号
            2、子进程只要死，就有17号信号到来，主进程就会去收尸，收完尸后主进程继续执行----简洁而又高效
            3、主进程对17号信号进行捕获，不会影响主进程本来的工作，主进程没事的时候就干本来的工作，有事情的时候就去收尸，子进程死会发送17号信号。
            4、在信号处理函数执行其间，如果有相同的信号同一个时间多次到来，只保留1个，其余统统丢弃。
            

信号处理的继承与恢复
    ●fork函数创建的子进程会继承父进程的信号处理方式。
        ➢父进程中对某个信号进行捕获，则子进程中对该信号依然捕获
        ➢父进程中对某个信号进行忽略，则子进程中对该信号依然忽略
    ●exec家族函数创建的新进程对信号的处理方式和原进程稍有不同
        ➢原进程中被忽略的信号，在新进程中依然被忽略
        ➢原进程中被捕获的信号，在新进程中被默认处理

发送信号
用专门的系统命令发送信号
    ➢kill [-信号] PID
    ➢若不指明具体信号，缺省发送SIGTERM(15)信号
    ➢若要指明具体信号，可以使用信号编号，也可以使用信号名称，而且信号名称中的"SIG" 前缀可以省略不写。例如
        kill -9 1234            //给1234进程发送9号信号
        kill -SIGKILL 1234 5678 //给1234、5678进程发送9号信号
        kill -KILL -1           //杀死当前用户的所有进程，-1:所有进程
    ➢ 超级用户可以发给任何进程，而普通用户只能发给自己的进程

    #include <signal.h>
    int kill(pid_t pid, int signum);
        功能:向指定的进程发送信号
        参数: pid可以如下取值
                -1 -向系统中的所有进程发送信号
                >0 -向特定进程(由pid标识)发送信号
            signum:信号编号，取0可用于检查pid进程是否存在，如不存在kil函数会返回-1,且errno为ESRCH
        返回值:成功(至少发出去一个信号)返回0, 失败返回-1

    #include <signal.h>
    int raise(int signum);
        功能:向调用进程自己发送信号
        参数:signum 信号编号
        返回值:成功返回0，失败返回非0会员水印
        kill(getpid(),signum)等价于该函数

暂停
    #include <unistd.h>
    int pause(void);
        功能:无限睡眠
        返回值: 成功阻塞，失败返回-1
    ➢该函数使调用进(线)程进入无时限的睡眠状态，直到有信号终止了该进程或被其捕获。如果有信号被调用进程捕获，在信号处理函数返回以后，
     pause函数才会返回，其返回值-1，同时置errno为EINTR，表示阻塞的系统调用被信号打断。pause函数要么不返回，要么返回-1，永远不会返回0。
    笔记:有信号来了，等信号处理函数结束后，pause函数才会返回
        被打断之前，要做信号捕获处理，直接用信号打断不做捕获处理，没有意义
    
睡眠
    #include <unistd.h>
    unsigned int sleep(unsigned int seconds);
        功能:有限睡眠
        参数:seconds 以秒为单位的睡眠时限
        返回值:返回0或剩余秒数。
    ➢该函数使调用进程睡眠seconds秒，除非有信号终止了调用进程或被其捕获
    ➢如果有信号被调用进程捕获，在信号处理函数返回以后，sleep函数才会返回，且返回值为剩余的秒数，否则该函数将返回0，表示睡眠充足
    
    #include <unistd.h>
    int usleep(useconds_t usec);
        功能:更精确的有限睡眠
        参数:usec以微秒(1微秒=10-秒)为单位的睡眠时限
        返回值:成功返回0,失败返回-1此会
    ➢如果有信号被调用进程捕获，在信号处理函数返回以后，usleep函数才会返回，且返回值为-1，同时置errno为EINTR，表示阻塞的系统调用被信号中断
    笔记：
        sleep\usleep能被信号打断
        1s = 1000ms, 1ms = 1000us
        1s = 1000000us
        0.1s = 100000us
        0.01s = 10000us
        0.001s = 1000us
        0.0001s = 100us
        被打断之前，要做信号捕获处理，直接用信号打断不做捕获处理，没有意义
        
闹钟
    #include <unistd.h>
    unsigned int alarm(unsigned int seconds);
        功能:设置闹钟
        参数：seconds 以秒为单位的闹钟时间
        返回值:返回0或先前所设闹钟的剩余秒数。
    ➢alarm函数使系统内核在该函数被调用以后seconds秒的时候，向调用进程发送SIGALRM(14)信号
    ➢若在调用该函数前已设过闹钟且尚未到期，则该函数会重设闹钟，并返回先前所设闹钟的剩余秒数，否则返回0
    ➢若seconds取0，则表示取消先前设过且尚未到期的闹钟
