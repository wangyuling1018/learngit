汇合线程
    #include <pthread.h>
    int pthread_join(pthread_t tid, void** retval);
    功能:等待子线程终止，即其线程过程函数返回，并与之会合，同时回收该线程的资源
    参数:tid:线程ID.
        retval:输出线程过程函数的返回值  //获取子线程的返回值 //给哪个一级指针的地址，就将线程过程函数的返回值存入哪个一级指针
    返回值:成功返回0，失败返回错误码。
    //主要目的是回收子线程资源，获取子线程的返回值
    
    ●在父线程中调用pthread_join函数等待子线程的终止，并回收其资源。如果调用该函数时子线程已经终止,该函数会立即返回，
     如果调用该函数时子线程尚在运行中，该函数会阻塞，直至子线程终止。该函数在返回成功的同时通过其retval参数向调用者输出
     子线程线程过程函数的返回值。



什么是分离线程
    ●一个线程在默认情况下都是可汇合线程，这样的线程在终止以后其资源会被保留，其中含有线程过程函数的返回值及线程ID等信息，
    父线程可以通过pthread_join函数获得线程过程函数的返回值，同时释放这些资源。如果在创建线程以后，对其调用
    pthread_detach函数并返回成功，该线程即成为分离线程，这样的线程终止以后其资源会被系统自动回收，不需要也无法通过pthread_join函数汇合它。

分离线程
    #include < pthread.h>
    int pthread_detach(pthread_t tid);
        功能:使指定的线程进入分离状态
        参数: tid线程的ID
        返回值:成功返回0，失败返回错误码。
    笔记：
        1、由于pthread_join函数是阻塞函数，pthread_join收资源就会阻塞主函数，某些情况主线程不能阻塞，有没有两全其美的方法，
        我既能收资源又不阻塞主线程？分离线程，默认情况下线程是可回收的，可汇入的，但是我们可以把这个线程设置成分离线程，如果这个
        线程具有分离属性的话，这个线程不需要主线程去回收，内核去回收线程的资源。
        2、pthread_join不能和设置分离属性(pthread_detach)一起使用，否则报错。
        
线程ID
    笔记：
        Pthread_t类型是POSIX标准提供的，表示不同的线程id，不同的操作系统都支持pthread_t类型，该类型可能有的系统
    是long int，有的系统可能是unsigned long，有的系统是struct结构体，pthread_t只是相当于一个接口这么个东西，至于你系统底层
    用什么去支持它，这个无所谓。现在去比较2个struct类型的pthread_t，无法用“==”或“=！”去比较。所以posix线程库专门提供了
    一个比较函数pthread_equal。
    
    ●pthread_t类型的线程ID是POSIX线程库内部维护的线程的唯一标识，通常表现为一个很大的整数，跨平台，可移植。
        #include <pthread.h>
        pthread_t pthread_self(void);
        返回调用线程的(POSIX线程库的)TID

    ●syscall(SYS_gettid)函数返回是一个long int类型整数，是系统内核产生线程唯一标识。一个进程的PID其实就是它的主线程的TID。
        #include <sys/syscall.h>
        long int syscall(SYS_gettid);
        返回调用线程的(系统内核的)TID。

    ●pthread_t类型在不同系统会被实现为不同的数据类型，甚至可能会使用结构体。因此判断两个线程ID是否相等或不相等，
    最好不要使用"=="或"!="运算符，因为这些关系运算符只能用于C语言内置的简单类型，而对于结构类型的数据不适用。
        ➢#include < pthread.h>
        ➢int pthread_equal(pthread_t t1, pthread_t t2);
        ➢若两个参数所表示的TID相等返回非零，否则返回0。

并发冲突
    ●当多个线程同时访问其共享的进程资源时，如果不能相互协调配合，就难免会出现数据不一致或不完整的问题。 这种现象被称为线程间的并发访问冲突,简称并发冲突
        ➢假设有整型全局变量g_cn被初始化为0
        ➢int g_cn = 0;
        ➢启动两个线程，同时执行如下线程过程函数，分别对该全局变量做一百万次累加
        ➢void* start routine (void* arg) {
            int i;
            for(i = 0;i < 1000000; ++i)
                ++g_cn;
            return NULL;
        }
        ➢两个线程结束后，g_cn的值理想情况下应该是两百万，但实际情况却往往少于两百万， 且每次运行的结果不尽相同




 




   
