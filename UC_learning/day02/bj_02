环境变量表
    1、每个进程都有一张独立的环境变量表，其中的每个条目都是-一个形如“键=值”形式的环境变量
    2、所谓环境变量表就是一个以NULL指针结束的字符指针数组，其中的每个元素都是一个字符指针，指向一个以空字符结尾的字符串，该字符串就是形如 ”键=值”形式的环境变量。该指针数组的地址保存在全局变量environ中
    3、通过全局环境变量表指针environ可以访问所有环境变量extern char** environ;
        char** pp;
        for (pp = environ; *pp; ++pp){
            printf ("%s\n", *pp);
        }
    4、main函数的第三个参数
    main函数的第三个参数就是环境变量表的起始地址
    int main (int argC, char* argv[], char* envp[]) {
        extern char** environ;
        printf ("%p, %p\n", environ, envp);//相等
        char** pp;
        for (pp = envp; * pp; ++pp){
            printf (' %s\n", *pp);
        }
        return 0;
    }
    
笔记：
    进程结束，环境变量表也释放了。
    main函数的第3个参数是环境变量表的起始地址。
    Int main(int argc,char* argv[],char* envp[])
        Argc：命令行参数的个数；argv：命令行参数的内容。envp：当前进程的环境变量
        char* argv[] == char** argv
        char* envp[] == char** envp
        //argc:记录命令行参数的个数
        //例如:./hello -> argc=1
        //./hello 100 200 -> argc=3
        //argv:记录命令行终端输入的信息对应的字符串首地址
        //例如:"./hello＂ -> argv[0]存储./hello的首地址
        //./hello 100 200 -> argv[0]="./hello";argv[1]="100";argv[2]="200"
        //当运行程序的时候, 可以通过argv获取参数:
        //./hello 100 200
        //argv[1] = "100"; argv[2] = "200";
        
    全局环境变量和局部环境变量的区别：
        全局环境变量可以被继承，能env查看
        局部环境变量不能被继承，env命令查看不到
    gcc继承bash的LIBRARY_PATH全局环境变量，
   
什么是库文件
单一模型:
    将程序中所有功能全部实现于一一个单一-的源文件内部。编译时间长，不易于维护和升级，不易于协作开发。
分离模型:
    将程序中的不同功能模块划分到不同的源文件中。缩短编译时间，易于维护和升级，易于协作开发。。

对多个目标文件的管理比较麻烦
将多个目标文件统一整理合成一个库文件。

●为何要把一个程序分成多个源文件，并由每个源文件编译生成独立的目标文件?
    ➢化整为零、易于维护、 便于协作。
●为何要把多个目标文件合并成一一个库文件?
    ➢集零为整、方便使用、易于复用。
●可以简单的把库文件看成一种代码仓库， 它提供给使用者一些可以直接拿来用的变量、函数或类
●库文件一-般指计算机上的一类文件,分两种，-种是静态库，另-种是动态库

静态库
    1、静态库的本质就是将多个目标文件打包,成一个文件。 //目标文件就是.o文件
    2、链接静态库就是将库中被调用的代码复制到调用模块中
    3、静态库的拓展名是.a 例:libxxx.a

静态库的构建
    以构建数学库为例，静态库的构建顺序如下:
    A.编辑库的实现代码和接口声明
        一计算模块:calc.h、calc.c
        -显示模块:show.h、show.c
        一接口文件:math.h
    B.编译成目标文件
        gcc -c calc.c
        gcc -c show.c
    C.打包成静态库
        ar -r libmath.a calc.o show.o
    
        
    ar命令
    ar [选项] <静态库文件> <目标文件列表>
    -r 将目标插入到静态库中，已存在则更新
    -q 将目标文件追加到静态库尾
    -d 从静态库中删除目标文件
    -t 列表显示静态库中的目标文件
    -x 将静态库展开为目标文件
        
静态库的使用
    编辑库的使用代码
        main.c
    编译并链接静态库
        //调用模块main.c与库在同一个路径下，使用该方式
        直接链接静态库
            gcc main.c libmath.a
        //调用模块main.c与库不在同一个路径下，有以下2种编译方式
        用-l指定库名，用-L指定库路径
            gcc mian.c -lmath -L.
        用-l指定库名，用LIBRARY_PATH环境变量指定库路径  //gcc继承bash的LIBRARY_PATH全局环境变量，gcc执行时去LIBRARY_PATH中找.a
            export LIBRARY_PATH=$LIBRARY_PATH:.
            gcc main.c -lmath

笔记：
*库不能以头文件的形式包含的main.c中。因为头文件是头文件，库文件是库文件。
*main.c中要调用库中的函数，将库中所有的头文件都放入一个XX.h文件中，main.c使用的时候直接包含XX.h即可。
    gcc编译的时候仍然是gcc main.c libXX.a -o main 或 gcc main.c libxx.so -o main，XX.h通常叫接口文件。
ar -r  将.o文件汇总打包到一个.a静态库中。
ar : archived 归档
.o文件是二进制文件
*库一般存放在常用的指定目录中，不一定和我的调用模块在一个路径下面。LIBRARY_PATH是gcc找库的环境变量。

动态库
    1、动态库和静态库不同，链接动态库不需要将被调用的函数代码复制到包含调用代码的可执行文件中，相反链接器会在调用语句处嵌入一段指令，
        在该程序执行到这段指令时，会加载该动态库并寻找被调用函数的入口地址并执行之。
    2、如果动态库中的代码同时为多个进程所用，动态库在内存的实例仅需一份，为所有使用该库的进程所共享，因此动态库亦称共享库。
    3、动态库的拓展名是.so 例libxxx.so

动态库的构建
    以构建数学库为例，动态库的构建顺序如下:
        A.编辑库的实现代码和接口声明
            一计算模块:calc.h、calc.c
            -显示模块:show.h、show.c
            一接口文件:math.h
        B.编译成目标文件
            gcc -c -fpic calc.c
            gcc -c -fpic show.c
        C.打包成动态库
            gcc -shared calc.o show.o -o libmath.so
    
    编译链接也可以合并成一步完成
        gcc -shared -fpic calc.c show.c -o libmath.so
    PIC(Position Independent Code，位置无关代码)
        调用代码通过相对地址标识调用代码的位置，模块中的指令与该模块被加载到内存中的位置无关
    -fPIC:大模式，生成代码比较大，运行速度比较慢，所有平台都支持
    -fpic:小模式，生成代码比较小，运行速度比较快，仅部分平台支持
    
动态库的使用
    编辑库的使用代码
        main.c
    编译并链接动态库
        //调用模块main.c与库在同一个路径下，使用该方式
        直接链接动态库
            gcc main.c libmath.so
        //调用模块main.c与库不在同一个路径下，有以下2种编译方式
        用-l指定库名，用-L指定库路径
            gcc mian.c -lmath -L.
        用-l指定库名，用LIBRARY_PATH环境变量指定库路径
            export LIBRARY_PATH=$LIBRARY_PATH:.
            gcc main.c -lmath
    运行时需要保证LD_LIBRARY_PATH环境变量中包含共享库所在的路径用以告知链接器在运行时链接动态库
        export LD_LIBRARY_PATH=$LD_LIBRARY PATH:.
    在可执行程序的链接阶段，并不将所调用函数的二进制代码复制到可执行程序中，而只是将该函数在共享库中的地址嵌入到调用模块中，因此运行时需要依赖共享库

静态库的优缺点
优点:
    执行速度快
    可执行程序不依赖库的存在
缺点:
    文件体积相对较大
    更新困难，维护成本高
    
        
动态库的优缺点:
优点:
    可执行文件体积小，节省空间
    易于链接，便于更新维护
缺点:
    文件执行速度相对较慢
    可执行程序依赖库文件的存在

笔记：
可执行程序执行的时候，链接器要找库，要先配置链接器的环境变量，在链接器的环境变量中配置动态库的路径。

环境变量              用于什么      干什么的
PATH                 bash        找可执行程序
LIBRARY_PATH         gcc         编译时，找库
LD_LIBRARY_PATH      链接器       程序执行时，找库

time ./a.out - 查看可执行程序的执行时间


