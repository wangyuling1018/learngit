你的程序是如何跑起来的
    ●我们写好代码，经过编译后，得到可执行文件a.out。那么a.out是如何被执行起来的呢?
    ➢a.out文件是二 进制指令的集合，其内容经操作系统的管理调度被加载到物理内存，
        CPU再从物理内存中读取指令执行。我们写的程序就这样跑起来啦。

电脑为什么会变得很慢
电脑上的软件开多了，电脑会变得很“卡”，这是为什么?
    ➢程序被加载到物理内存，才能被CPU所执行。物理内存的空间有限，当难以满足使用需求时，会把一些长期闲置的代码和
        数据从物理内存缓存到磁盘上，这叫页面换出，一旦需要使用那些代码和数据，再把它们从磁盘上恢复到物理内存中，这叫页面的换入。
    ➢磁盘上用来缓存物理内存数据的部分称为交换分区
    ➢磁盘的读写速率要远慢于物理内存，大量的数据换入和换出，会导致电脑变得很“卡”。
    
地址的“真假”
我们再程序中看到的地址，真的就是物理内存的地址吗?
    ➢我们在程序中所看到的或者使用的地址，并非是真实的物理内存的地址，而是经由系统内核的内存管理系统管理后所看到的虚拟地址。
    ➢虚拟地址和物理地址之间存在映射对应关系。
    ➢内存管理系统一方面保证物理内存的安全，避免物理内存被直接操作，同时也降低了程序员的编码难度。
    ➢CPU中包含一个名为MMU(Memory Management Unit)的内存管理单元，负责完成虚拟地址和物理地址之间的转换。
    
虚拟地址空间
    ➢对于32位操作系统而言，每个进程都有4G大小的虚拟地址空间。
    ➢所谓的虚拟地址空间本质就是一个地址范围，表示程序的寻址能力。我们所看到的虚拟地址，都是在这个4G的范围内。
    ➢对于32位操作系统而言，其虚拟地址空间范围从0x00000000到OxFFFFFFFF
    ➢其中0~3G-1的范围归用户所使用，称为用户地址空间，3G~4G-1的范围归内核使用，称为内核地址空间。
    ➢对于64位的操作系统而言，目前应用程序没有那么大的内存需求，所以不支持完全的64位虚拟地址。
    ➢64位系统上，其用户地址空间范围是:
        Ox0000 0000 0000 0000 ~Ox0000FFFF FFFF FFFF
    ➢64位系统上， 其内核地址空间范围是:
        OxFFFF 0000 0000 O000 ~OxFFFF FFFF FFFFFFFF
    ➢内核地址空间和用户地址空间之间是不规范地址空间，不允许使用。
    ➢用户地址空间的代码不能直接访问内核空间的代码和数据，但可以通过系统调用进入内核态，间接与系统内核交互
    
虚拟地址空间布局
    用户地址空间中从低地址到高地址布局如下:
                 参数和环境区     命令行参数和环境变量
    高地址        栈区(stack)     非静态局部变量
                                堆栈增长的预留空间共享库、共享内存等
                 堆区(heap)      动态内存分配
                 BSS区(bss)     未被初始化的全局和静态局部变量不具常属性且被初始化
                 数据区(data)    不具常属性且被初始化的全局和静态局部变量
    低地址        代码区(text)    可执行指令、字面值常量、具有常属性且被初始化的全局和静态局部变量
    //常局部变量是栈区的，常局部变量前加上static才是在代码区。


内存壁垒
    ➢每个进程的用户空间都是0~3G-1，但它们所对应的物理内存却是各自独立的，系统为每个进程的用户空间维护
        一张专属于该进程的内存映射表，记录虚拟内存到物理内存的对应关系，因此在不同进程之间交换虚拟内存地址是毫无意义的
    ➢所有进程的内核空间都是3G~4G-1，它们所对应的物理内存只有一份，系统为所有进程的内核空间维护一张内存映射表init_mm.pgd，
        记录虚拟内存到物理内存的对应关系，因此不同进程通过系统调用所访问的内核代码和数据是同一份
    ➢用户空间的内存映射表会随着进程的切换而切换，内核空间的内存映射表则无需随着进程的切换而切换
    笔记：进程与进程之间想要通信是很难的，每个进程都有自己的虚拟地址，通过自己的虚拟地址只能存储到自己的存储区里，即使进程与进程有相同
        的虚拟地址，找到的物理地址也是不一样的，这就是内存壁垒，需要通过专门的技术手段进行进程间通信：管道、消息队列等

段错误
    一切对虚拟内存的越权访问，都会导致段错误
        ➢试图访问没有映射到物理内存的虚拟内存
        ➢试图以非法方式访问虚拟内存，如对只读内存做写操作等。
    笔记：
        段错误都是在程序执行的时候产生。在编译阶段产生错误是语法问题。段错误是执行的问题。
        程序中大多数出现段错误的情况都是第一种情况。
        第一种情况：程序中经常算地址，例如指针加1等。如果地址无法算明白，找不到对应的物理地址，就会出现段错误。
        第二种情况：只读内存：虚拟地址空间中代码区的数据。代码区又叫只读常量区，代码区的数据是不允许修改的。
                  只读内存的意思不是在某个变量前面加一个const就叫只读内存了。


