域名解析
    ●IP地址是网络上标识站点的数字地址，为了方便记忆，采用域名来代替IP地址标识站点地址
    ●域名解析就是域名到IP地址的转换过程。域名的解析工作由DNS服务器完成
    ●当应用过程需要将一个主机域名映射为IP地址时，就调用域名解析函数，解析函数将待转换的域名放在DNS请求中，
     以UDP报文方式发给本地域名服务器。本地的域名服务器查到域名后，将对应的IP地址放在应答报文中返回
     //域名：www.baidu.com，通过域名可以找到服务器IP地址

    #incluce <netdb.h>
    struct hostent* gethostbyname(char const* host_name);
        功能:通过参数所传的主机域名，获取主机信息
        参数:host_name:主机域名
        返回值:函数执行成功返回表示主机信息的结构体指针，失败返回NULL
        注意，该函数需要在联网情况下使用
    

    struct hostent {
        char *h_name;       //主机官方名     //每台服务器有且只有一个官方名称
        char **h_aliases;   //主机别名表     //别名可能有多个 ，二级指针：指针数组，数组中每个元素存的是char* = “XXXX\n”,最后一个元素为NULL
        int h_addrtype;     //地址类型      //AF_INET -基于IPv4的网络通信 或 AF_INET6 -基于IPv6的网络通信
        int h_length;       //地址长度
        char **h_addr_list; //IP地址表     //iP地址可能有多个，二级指针：指针数组，数组中每个元素存的是struct in_addr*,最后一个元素为NULL，用时候将char**强制转换成struct in_addr**
    };
    //h_aliases和h_addr_list，与环境变量char** envp类似。
         
    ●对于WEB服务器而言，主机官方名有一一个，而主机别名可能有多个，这些别名都是为了便于用户记忆。同时IP地址也可能有多个。
        ➢h_aliases -> *  ->  "xxx\n"
                      *  ->   "xxx\n"
                     NULL;
                   
        ➢h_addr_list -> * -> in_addr
                        * -> in_addr
                        NULL
        笔记：
        struct in_addr{
            in_addr_t s_addr;
        };
        
        
HTTP
    ●我们在通过浏览器获取网络资源的过程中，-直在遵循HTTP协议。客户端终端和服务器终端请求和应答的标准，客户端发起一个
     HTTP请求到服务器上指定端口，默认80，应答服务器上存储着-些资源，比如HTML文件和图像等
    ●浏览器地址栏中输入URL,按下回车后会经历的流程:
        ➢1、浏览器向DNS服务器请求解析该URL中的域名所对应的IP地址。
        ➢2、根据解析后的IP地址和默认端口80和服务器建立TCP连接。
        ➢3、浏览器发出HTTP请求
        ➢4、服务器对浏览器的请求作出响应。
    笔记；
        1、http协议规范了应用层上 浏览器客户端与服务器的通信标准，浏览器产生的数据（请求和响应）应该以http协议格式发送给服务器。
        2、url：超链接，网址，统一资源定位符

    ●HTTP的请求和响应
        请求 == 方法 + URL + 协议版本 + 请求首部字段 + 内容实体
        ➢请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。例如，GET /index.html HTTP/1.1。
        ➢HTTP1.0定义了三种请求方法: GET, POST和HEAD方法。
        ➢HTTP1.1新增了五种请求方法: OPTIONS, PUT, DELETE, TRACE和CONNECT方法。
        ➢其中GET是最常用的请求方法，用来获取服务器的数据
        //http:www.baidu.com:8080/index.html -> 8080:可以省略，不写默认按照8080端口。/index.html是访问服务器的具体路径
        //http:www.baidu.com/ -》 没有跟具体路径，只有/，表示访问服务器首页
        //GET, POST是常用的请求方法，都是从服务器获取数据，其中POST是可以传数据
        
        ➢请求头部由关键字/值对组成，每行一对，关键字和值用英文冒号“:”分隔。请求头部通知服务器有关于客户端请求的信息，典型的请求头有:
            ➢Accept:告诉服务器自己接受什么类型的介质，*/*表示任何类型，type/*表示该类型下的所有子类型， //告诉服务器，我要什么类型数据。例如：我要.png类型数据，image是主类型下有png、jpg类型数据
            ➢Host:客户端指定自己想访问的web服务器的域名      //告诉服务器，我想访问的服务器域名
            ➢UserAgent:浏览器表名自己的身份，是那种浏览器    //告诉服务器，我是哪种浏览器
            ➢Referer:浏览器web服务器表名自己是从哪个网页URL获得点击当前请求中的网址   //告诉服务器，我是从哪个页面点击获得当前请求的
            ➢Connection:表示是否需要持久连接
        
        响应 == 协议版本  + 状态码 + 状态码的原因短语 + 响应首部字段 + 内容主体
        ➢HTTP响应也由三个部分组成，分别是:状态行、响应头、空行、响应正文。

        ➢当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的
         服务器会返回一个包含HTTP状态码的信息头(serverheader)用以响应浏览器的请求，常见状态码有:
            ➢200 OK:客户端请求成功。
            ➢400 Bad Request:客户端请求有语法错误，不能被服务器所理解。
            ➢403Forbidden:服务器收到请求，但是拒绝提供服务。
            ➢404 Not Found:请求资源不存在，举个例子:输入了错误的URL。
            ➢503 Server Unavailable:服务器当前不能处理客户端的请求，一段时间后可能恢复正常


        ➢ 消息报头一般包括以下内容:
            ➢Date:响应时间
            ➢Content-Type:响应类型
            ➢Content-Length:响应数据大小
            ➢Connection:连接状态

