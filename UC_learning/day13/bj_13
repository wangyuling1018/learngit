创建新进程
    ●与fork不同， exec函数不是创建调用进程的子进程，而是创建-一个新的进程取代调用进程自身。
     新进程会用自己的全部地址空间，覆盖调用进程的地址空间，但进程的PID保持不变
    笔记：
        1、fork创建子进程，一变二。
        2、exec创建新进程，将原来的进程取代掉，也叫进程的取代，进程的覆盖。替换前进程的编号保持不变。
        3、fork创建子进程，这个子进程是父进程的副本，子进程所执行的功能具有一定的局限性。而单纯用exec，
            原有的功能又会被取代掉。如果既想执行一些新奇的功能，又想保留原有的功能，就用fork+exec模式。
            fork创建子进程，然后让子进程做exec变身。
        4、变身后的父子关系是不变的

    ●exec不是一个函数而是一堆函数(共6个)，一般称为exec函数族。它们的功能是一样的，用法也很相近，只是参数的形式和数量略有不同
        #include <unistd.h>
        int execl(const char* path, const char* arg, ..);
            笔记： 1、execl = execute + list,执行 + 列表。
                2、path :可执行程序所在的路径。例如：./a.out
                3、arg,... ：arg + 可变长参数，执行程序的命令，例如：./a.out "a.out" "hello" "123" ,其中"a.out" "hello" "123"是可变长参数
                4、以NULL结束:execl("./a.out","a.out" "hello" "123",NULL);
        int execlp(const char* file, const char* arg, ...);
            笔记：1、file：文件名，根据PATH环境变量找这个文件，没找到execlp就报错
        int execle(const char* path, const char* arg, ..,char* const envp[]);
            笔记：
        int execv(const char* path, char* const argv[]);
        int execvp(const char* file, char* const argv[]);
        int execve(const char* path, char* const argv[],char* const envp[]);
    ●exec函数族一 共包括6个函数，它们的函数名都是在exec后面加上- 到两个字符后缀，不同的字符后缀代表不同的含义
        ➢l: 即list,新进程的命令行参数以字符指针列表(Const char* arg, ..)的形式传入,列表以空指针结束
        ➢p:即path,若第一一个参数中不包含"I"，则将其视为文件名，并根据PATH环境变量搜索该文件
        ➢e:即environment,新进程的环境变量以字符指针数组(char* const envp[])的形式传入, 数组以空指针结束，
          不指定环境变量则从调用进程复制
        ➢V:即vector,新进程的命令行参数以字符指针数组(char* const argv[])的形式传入，数组以空指针结束
    ●其实6个exec函数中只有execve是真正的系统调用，其它5个函数不过是对execve函数的简单包装
    ●调用exec函数不仅改变调用进程的地址空间和进程映像，调用进程的一些属性也发生了变化
        ➢任何处于阻塞状态的信号都会丢失
        ➢被设置为捕获的信号会还原为默认操作
        ➢有关线程属性的设置会还原为缺省值
        ➢有关进程的统计信息会复位
        ➢与进程内存相关的任何数据都会丢失，包括内存映射文件
        ➢标准库在用户空间维护的一切数据结构(如通过atexit或on_exit函数注册的退出处理函数)都会丢失
    ●但也有些属性会被新进程继承下来，比如PID、PPID、实际用户ID和实际组ID、优先级，以及文件描述符等
    ●注意如果进程创建成功，exec函数是不会返回的，因为成功的exec调用会以跳转到新进程的入口地址作为结束，
      而刚刚运行的代码是不会存在于新进程的地址空间中的。但如果进程创建失败，exec函数会返回-1
    ●调用exec函数固然可以创建出新的进程，但是新进程会取代原来的进程。如果既想创建新的进程，同时又希望原来的
     进程继续存在，则可以考虑fork+ exec模式，即在fork产生的子进程里调用exec函数，新进程取代了子进程，但父进程依然存在

    笔记：
        6、execl执行成功后是不返回的。因为：execl是旧进程调用的，execl一旦成功了就开始执行新进程了，
         返回给谁呢？返回给旧进程吗？旧进程已经被取代了。返回给新进程吗？又不是新进程调用的execl。
        7、进程的取代一般用于bash上。在bash上敲./a.out或ls，这些可执行程序./a.out和ls都是bash的子进程。
         bash和这些子进程之间的关系是啥呢？实际上是用到了execl和fork的组合。当在命令行上敲./a.out的时候，bash就开始忙了，
         bash会创建（fork）一个子进程，创建子进程后，bash会控制这个子进程execl变身成a.out，所以这个子进程就是a.out
        8、新进程取代旧进程，实际上是一个进程，并不是2个进程，只是我干的活不一样了而已。PID没有变，是一个进程，
         只是前后所执行的功能发生了改变了而已。
        9、新进程和旧进程不是父子关系，是对等关系。且变身前后的父子关系没有变更，之前父进程是谁，现在父进程还是谁。
        10、.bashrc文件是脚本文件，里面有很多命令的别名，例如：“ls”的别名是“--color=auto”，在终端窗口上执行ls，
         默认执行的是--color=auto。.bashrc文件影响的是bash，在bash下执行ls，ls是bash的子进程，
         那么ls就会受到.bashrc文件的影响，继承关系。很多关于bash的操作都会写到.bashrc文件中。
        11、fork创建子进程，这个子进程是父进程的副本，子进程所执行的功能具有一定的局限性。而单纯用exec，原有的功能又会被取代掉。
         如果既想执行一些新奇的功能，又想保留原有的功能，就用fork+exec模式。fork创建子进程，然后让子进程做exec变身。
        12、Execlp:file是文件名，execlp=execl + PATH环境变量。execlp依次到PATH环境变量中记录的路径中找你要变身的文件。
         如果所有的路径都没有找到，那么execlp就会报错。
        13、Execle：execl + envp环境变量。变身为什么要环境变量？子进程会继承父进程环境变量的内容，变身如果没有做特别的指定的话，
         变身前的环境变量和变身后的环境变量一样。现在想要给变身后的环境变量做一个指定。通过指定环境变量实现变身前和变身后进程的信息传递。
         如果想要给变身后的进程传递点什么东西？可以通过指定环境变量。。。
        14、Execv = exec + vector向量，vector向量就是指更加好用的数组。将命令行参数以数组的形式传递进来。
        15、Execl = exec + list列表。将命令行参数以列表的形式传递进来。

    #include < stdlib.h>
    int system (const char* command);
        ➢功能:执行shell命令
        ➢参数: command shell命令行字符串
        ➢返回值:成功返回command进程的终止状态，失败返回-1

    ➢system函数执行command参数所表示的命令行，并返回命令进程的终止状态
    ➢若command参数取NULL,返回非0表示Shell可用，返回0表示Shell不可用

    ●在system函数内部调用了vfork、 exec和waitpid等函数
        ➢如果调用vfork或waitpid函数出错，则返回-1
        ➢如果调用exec函数出错，则在子进程中执行exit(127)
        ➢如果都成功，则返回command进程的终止状态(由waitpid的status参数获得)

    ●使用system函数而不用vfork+exec的好处是，system函数针对各种错误和信号都做了必要的处理，
     而且system是标准库函数，可跨平台使
     
    笔记：
        1、system是标准库函数，对应shell命令而言不一定敲在终端窗口的命令行中，我也可以在程序执行的时候通过函数执行。
        2、command是你想执行的命令。
        3、system底层干的事情就是fork+exec +waitpid。
        4、vfork创建子进程。fork创建子进程，会复制一份父进程的数据，exec变身后新进程数据会覆盖复制过来的数据。相当于复制过来的数据
          暂时用了一会后，就又被新数据覆盖了。vfork创建子进程，父进程会被挂起，子进程暂时用一下父进程的数据，不会复制一份父进程的数据，
          exec变身后子进程就有自己的数据了。所以变身的时候基本上都选用vfork。






